{"version":3,"sources":["components/WordlistUploadButton.js","js/wordplay.js","js/searchtypes.js","js/searchmodes.js","components/SearchModeMenu.js","components/SearchInputArea.js","components/SearchResults.js","components/ResultsSorter.js","components/InfoModal.js","js/wordlist.js","components/SearchArea.js","components/App.js","index.js"],"names":["WordlistUploadButton","className","htmlFor","id","type","accept","name","text","onChange","this","props","onFileChange","onClick","onOpenModal","onDictionaryClick","Component","Wordplay","word","toUpperCase","replaceAll","split","reverse","join","sort","i","length","substring","word1","word2","sortedWord2","word1Substring","regex","RegExp","test","pattern","every","letter","matchesRegex","patternToRegex","getLetterBank","tiles","tile_counter","word_counter","fail","tile_current","word_current","isScrabbleWord","removeVowels","removeConsonants","bread","startsWith","endsWith","cleanWord","alphabet","centerLetter","outerLetters","allLetters","wordLetters","includes","reversed","distance","isNaN","Error","getDistance","n","letters","undefined","Math","abs","from","to","result","indices","exec","push","index","results","map","slice","Set","searchTypes","SINGLE","PAIRS","MULTIPAIRS","searchModes","desc","fields","func","x","matchesPattern","areAnagrams","containsAnagram","num","areAlmostAnagrams","parseInt","isLetterBank","usesLettersFrom","isSpread","isSandwichWord","isConsonantcy","isVowelcy","isDistance","replace","with_","replaceOne","str","isPalindrome","getSemordnilap","isIsogram","isSupervocalic","center","outer","spellingBee","SearchModeMenu","state","value","handleChange","bind","e","onSearchModeChange","target","option","searchMode","SearchInputArea","inputValues","handleInputChange","event","setState","prevState","onInputChange","onSubmit","field","submitError","MAX_RESULTS","SearchResults","firstIndex","showPrevResults","showNextResults","downloadAsTxt","getBackgroundColorStyle","nextProps","nextState","sortOrder","sortReverse","element","document","createElement","file","Blob","wordlist","scores","href","URL","createObjectURL","download","body","appendChild","click","resultItem","average","backgroundColor","max","showScores","resultsStyle","gridTemplateColumns","min","style","Fragment","SORTS","ResultsSorter","currentSort","defaultChecked","onSortClick","onSortChange","InfoModal","visible","onCloseModal","Wordlist","list","clean","otherList","concat","cleanedWord","scoreMatches","match","score","processWord","filter","numWords","floor","random","resultWords","wordPairs","makePair","y","localeCompare","resultPairs","pairCounter","listCounter","pairCurrent","listCurrent","DICTIONARY_NAME","SearchArea","gotResults","enable1","selectingWordlist","addingWordlist","filenames","showingModal","handleSearchModeChange","handleFileChange","handleDictionaryClick","handleWordlistChange","handleNewWordlist","handleWordlistAdd","handleSubmit","handleSortChange","handleSortClick","openModal","closeModal","searchModeName","newSearchMode","find","newInputValues","getElementById","reset","preventDefault","functionInputs","inputValue","getWords","getPairs","pair","getMultipairs","err","sortResults","files","wordlistError","reader","FileReader","readAsText","onload","newWords","onerror","throwWordlistError","fileName","newFilenames","addWords","newWordlist","sortClicked","oldState","a","b","reduce","c","d","class","filename","App","rel","Date","getFullYear","ReactDOM","render","StrictMode"],"mappings":"uyw/DAEqBA,E,uKAEb,OACI,8BACI,sBAAKC,UAAU,mBAAf,UACI,sBAAKA,UAAU,sBAAf,UACI,wBAAOC,QAAQ,cAAcD,UAAU,2BAAvC,UACI,mBAAGA,UAAU,qCACb,sBAAKA,UAAU,uCAAf,mBAA4D,uBAA5D,WAAyE,uBAAzE,iBAEA,uBACAE,GAAG,cACHC,KAAK,OACLC,OAAO,aACPC,KAAK,SACLC,KAAK,kBACLC,SAAUC,KAAKC,MAAMC,eAEzB,qBAAKV,UAAU,sBAAf,SACI,yBAAQA,UAAU,2BAA2BW,QAASH,KAAKC,MAAMG,YAAjE,UACI,mBAAGZ,UAAU,iCADjB,OAEU,qBAAKA,UAAU,cAAf,qCAIlB,sBAAMA,UAAU,KAAhB,kBACA,yBAAQA,UAAU,0BAA0BW,QAASH,KAAKC,MAAMI,kBAAhE,UACI,sBAAKb,UAAU,2CAAf,oBAAiE,uBAAjE,UAA6E,uBAA7E,gBACA,mBAAGA,UAAU,0C,GA5Bac,a,QCF7BC,E,uGAEAC,GACb,OAAOA,EAAKC,cAAcC,WAAW,w1OAAc,M,8BAIxCF,GACX,OAAOA,EAAKG,MAAM,IAAIC,UAAUC,KAAK,M,2BAI7BL,GACR,OAAOA,EAAKG,MAAM,IAAIG,OAAOD,KAAK,M,oCAIjBL,GACjBA,EAAOR,KAAKc,KAAKN,GACjB,IAAK,IAAIO,EAAI,EAAGA,EAAIP,EAAKQ,OAAQD,IACzBP,EAAKO,KAAOP,EAAKO,EAAI,KACrBP,EAAOA,EAAKS,UAAU,EAAEF,GAAKP,EAAKS,UAAUF,EAAE,EAAGP,EAAKQ,QACtDD,KAGR,OAAOP,I,kCAIQU,EAAOC,GAGtB,OAFkBnB,KAAKc,KAAKI,KACVlB,KAAKc,KAAKK,K,sCAKTD,EAAOC,GAE1B,IADA,IAAIC,EAAcpB,KAAKc,KAAKK,GACnBJ,EAAI,EAAGA,EAAIG,EAAMF,OAASG,EAAMH,OAAS,EAAGD,IAAK,CACtD,IAAIM,EAAiBH,EAAMD,UAAUF,EAAGA,EAAII,EAAMH,QAClD,GAAIK,IAAmBF,EAIvB,GAD2BnB,KAAKc,KAAKO,KACRD,EACzB,OAAO,EAGf,OAAO,I,mCAISZ,EAAMc,GAGtB,OADuB,IAAIC,OAAOD,EAAO,KACbE,KAAKhB,K,qCAIfiB,GAClB,OAAOA,EAAQd,MAAM,IAAIe,OAAM,SAAAC,GAAM,MAAI,SAASH,KAAKG,Q,qCAIrCF,GAClB,MAAO,IAAMA,EAAQf,WAAW,IAAK,KAAKA,WAAW,IAAK,MAAQ,M,qCAIhDF,EAAMiB,GACxB,OAAOzB,KAAK4B,aAAapB,EAAMR,KAAK6B,eAAeJ,M,mCAInCP,EAAOC,GACvB,OAAOD,IAAUC,GAASnB,KAAK8B,cAAcZ,KAAWlB,KAAK8B,cAAcX,K,qCAIzDX,EAAMuB,GAExBA,EAAQ/B,KAAKc,KAAKiB,GAClBvB,EAAOR,KAAKc,KAAKN,GAMjB,IAJA,IAAIwB,EAAe,EACfC,EAAe,EACfC,GAAO,EAEJD,EAAezB,EAAKQ,QAAUgB,EAAeD,EAAMf,QAAQ,CAC9D,IAAImB,EAAeJ,EAAMC,GACrBI,EAAe5B,EAAKyB,GAExB,GAAIE,EAAeC,EAAc,CAC7BF,GAAO,EACP,MACOC,IAAiBC,GACxBJ,IACAC,KAEAD,IAIR,OAAQC,IAAiBzB,EAAKQ,SAAWkB,I,qCAIvB1B,GAClB,OACIR,KAAKqC,eAAe,QAAS7B,KAC5BR,KAAKqC,eAAe,KAAM7B,KAC1BR,KAAKqC,eAAe,KAAM7B,KAC1BR,KAAKqC,eAAe,KAAM7B,KAC1BR,KAAKqC,eAAe,KAAM7B,KAC1BR,KAAKqC,eAAe,KAAM7B,K,mCAKfA,GAChB,OAAOA,EAAKE,WAAW,aAAc,M,uCAIjBF,GACpB,OAAOA,EAAKE,WAAW,2BAA4B,M,oCAIlCQ,EAAOC,GACxB,OAAOnB,KAAKsC,aAAapB,KAAWlB,KAAKsC,aAAanB,K,gCAIzCD,EAAOC,GACpB,OAAOnB,KAAKuC,iBAAiBrB,KAAWlB,KAAKuC,iBAAiBpB,K,qCAI5CX,EAAMgC,GACxB,GAAIhC,EAAKQ,QAAUwB,EAAMxB,OACrB,OAAO,EAGX,IAAK,IAAID,EAAI,EAAGA,EAAIyB,EAAMxB,OAAQD,IAC9B,GAAIP,EAAKiC,WAAWD,EAAMvB,UAAU,EAAEF,KAAOP,EAAKkC,SAASF,EAAMvB,UAAUF,EAAGyB,EAAMxB,SAChF,OAAO,EAGf,OAAO,I,+BAIKE,EAAOC,GACnB,GAAID,IAAUC,EACV,OAAO,EAGX,IAAIG,EAAQ,OADZJ,EAAQlB,KAAK2C,UAAUzB,IACGP,MAAM,IAAIE,KAAK,MAAQ,MACjD,OAAQ,IAAIU,OAAOD,GAAQE,KAAKL,K,sCAIbX,EAAMoC,GAGzB,OAFAA,EAAW5C,KAAK2C,UAAUC,GAElB,IAAIrB,OADA,KAAOqB,EAAW,OACHpB,KAAKhB,K,kCAIjBA,EAAMqC,EAAcC,GACnC,IAAIC,EAAcF,EAAeC,EAC7BE,EAAcxC,EAAKG,MAAM,IAC7B,OAAOH,EAAKyC,SAASJ,IAAiBG,EAAYtB,OAAM,SAAAC,GAAM,OAAIoB,EAAWE,SAAStB,OAAYnB,EAAKQ,QAAU,I,mCAIjGR,GAChB,OAAOA,IAASR,KAAKY,QAAQJ,K,qCAIXA,GAClB,IAAI0C,EAAWlD,KAAKY,QAAQJ,GAC5B,OAAI0C,EAAW1C,EACJ0C,EAGA,K,gCAKE1C,GACb,OAAOR,KAAK8B,cAActB,GAAMQ,SAAWR,EAAKQ,S,kCAIjCE,EAAOC,GACtB,GAAID,EAAMF,SAAWG,EAAMH,OACvB,OAAQ,EAIZ,IADA,IAAImC,EAAW,EACNpC,EAAI,EAAGA,EAAIG,EAAMF,OAAQD,IAC1BG,EAAMH,KAAOI,EAAMJ,IACnBoC,IAGR,OAAOA,I,iCAIOjC,EAAOC,EAAOgC,GAC5B,GAAIC,MAAMD,GACN,MAAM,IAAIE,MAEd,OAAOrD,KAAKsD,YAAYpC,EAAOC,KAAWgC,I,wCAIrBjC,EAAOC,EAAOoC,GACnC,GAAIrC,IAAUC,EACV,OAAO,EAEX,GAAID,EAAMF,SAAWG,EAAMH,OACvB,OAAO,EAEX,GAAIoC,MAAMG,GACN,MAAM,IAAIF,MAGd,IAXsC,EAWlCG,EAAU,GAXwB,cAajBtC,GAbiB,IAatC,2BAA4B,CAAC,IAAlBS,EAAiB,aACA8B,IAApBD,EAAQ7B,GACR6B,EAAQ7B,GAAU,EAElB6B,EAAQ7B,MAjBsB,kDAqBjBR,GArBiB,IAqBtC,2BAA4B,CAAC,IAAlBQ,EAAiB,aACA8B,IAApBD,EAAQ7B,GACR6B,EAAQ7B,IAAW,EAEnB6B,EAAQ7B,MAzBsB,8BA6BtC,IAAIwB,EAAW,EAEf,IAAK,IAAMxB,KAAU6B,EACjBL,GAAYO,KAAKC,IAAIH,EAAQ7B,IAGjC,OAAOwB,EAAW,IAAMI,I,iCAIV/C,EAAMoD,EAAMC,GAC1BD,EAAO5D,KAAK2C,UAAUiB,GAGtB,IADA,IAAoCE,EAAhCxC,EAAQ,IAAIC,OAAOqC,EAAM,MAAeG,EAAU,GAC7CD,EAASxC,EAAM0C,KAAKxD,IACzBuD,EAAQE,KAAKH,EAAOI,OAGxB,IAAIC,EAAUJ,EAAQK,KAAI,SAAArD,GAAC,OAAIP,EAAK6D,MAAM,EAAGtD,GAAK8C,EAAKrD,EAAK6D,MAAMtD,EAAI6C,EAAK5C,WAE3E,OADAmD,EAAO,YAAO,IAAIG,IAAIH,Q,KCvQfI,EANK,CAChBC,OAAQ,EACRC,MAAO,EACPC,WAAY,GCmODC,EAnOK,CAChB,CACIjF,GAAI,gBACJG,KAAM,gBACN+E,KAAM,4JACNC,OAAQ,CAAC,WACTlF,KAAM4E,EAAYC,OAClBM,KAAM,SAAArD,GAAO,OAAK,SAAAsD,GAAC,OAAIxE,EAASyE,eAAeD,EAAGtD,MAEtD,CACI/B,GAAI,QACJG,KAAM,QACN+E,KAAM,wJACNC,OAAQ,CAAC,SACTlF,KAAM4E,EAAYC,OAClBM,KAAM,SAAAxD,GAAK,OAAK,SAAAyD,GAAC,OAAIxE,EAASqB,aAAamD,EAAGzD,MAElD,CACI5B,GAAI,UACJG,KAAM,UACN+E,KAAM,0FACNC,OAAQ,CAAC,QACTlF,KAAM4E,EAAYC,OAClBM,KAAM,SAAAtE,GAAI,OAAK,SAAAuE,GAAC,OAAIxE,EAAS0E,YAAYF,EAAGvE,IAASuE,IAAMvE,KAE/D,CACId,GAAI,iBACJG,KAAM,iBACN+E,KAAM,4EACNC,OAAQ,CAAC,QACTlF,KAAM4E,EAAYC,OAClBM,KAAM,SAAAtE,GAAI,OAAK,SAAAuE,GAAC,OAAIxE,EAAS2E,gBAAgBH,EAAGvE,MAEpD,CACId,GAAI,aACJG,KAAM,aACN+E,KAAM,6FACNC,OAAQ,CAAC,QACTlF,KAAM4E,EAAYC,OAClBM,KAAM,SAAA/C,GAAK,OAAK,SAAAgD,GAAC,OAAIxE,EAAS8B,eAAe0C,EAAGhD,MAEpD,CACIrC,GAAI,iBACJG,KAAM,iBACN+E,KAAM,gIACNC,OAAQ,CAAC,OAAQ,gBACjBlF,KAAM4E,EAAYC,OAClBM,KAAM,SAACtE,EAAM2E,GAAP,OAAgB,SAAAJ,GAAC,OAAIxE,EAAS6E,kBAAkBL,EAAGvE,EAAM6E,SAASF,OAE5E,CACIzF,GAAI,cACJG,KAAM,cACN+E,KAAM,2HACNC,OAAQ,CAAC,QACTlF,KAAM4E,EAAYC,OAClBM,KAAM,SAAAtE,GAAI,OAAK,SAAAuE,GAAC,OAAIxE,EAAS+E,aAAaP,EAAGvE,MAEjD,CACId,GAAI,mBACJG,KAAM,mBACN+E,KAAM,mGACNC,OAAQ,CAAC,WACTlF,KAAM4E,EAAYC,OAClBM,KAAM,SAAAtB,GAAO,OAAK,SAAAuB,GAAC,OAAIxE,EAAS8B,eAAemB,EAASuB,MAE5D,CACIrF,GAAI,mBACJG,KAAM,mBACN+E,KAAM,4GACNC,OAAQ,CAAC,WACTlF,KAAM4E,EAAYC,OAClBM,KAAM,SAAAlC,GAAQ,OAAK,SAAAmC,GAAC,OAAIxE,EAASgF,gBAAgBR,EAAGnC,MAExD,CACIlD,GAAI,SACJG,KAAM,iBACN+E,KAAM,sHACNC,OAAQ,CAAC,WACTlF,KAAM4E,EAAYC,OAClBM,KAAM,SAAAtE,GAAI,OAAK,SAAAuE,GAAC,OAAIxE,EAASiF,SAAShF,EAAMuE,MAEhD,CACIrF,GAAI,WACJG,KAAM,gBACN+E,KAAM,yGACNC,OAAQ,CAAC,SACTlF,KAAM4E,EAAYC,OAClBM,KAAM,SAAAtE,GAAI,OAAK,SAAAuE,GAAC,OAAIxE,EAASkF,eAAeV,EAAGvE,MAEnD,CACId,GAAI,cACJG,KAAM,cACN+E,KAAM,qGACNC,OAAQ,CAAC,QACTlF,KAAM4E,EAAYC,OAClBM,KAAM,SAAAtE,GAAI,OAAK,SAAAuE,GAAC,OAAIxE,EAASmF,cAAcX,EAAGvE,MAElD,CACId,GAAI,UACJG,KAAM,UACN+E,KAAM,gGACNC,OAAQ,CAAC,QACTlF,KAAM4E,EAAYC,OAClBM,KAAM,SAAAtE,GAAI,OAAK,SAAAuE,GAAC,OAAIxE,EAASoF,UAAUZ,EAAGvE,MAE9C,CACId,GAAI,gBACJG,KAAM,iBACN+E,KAAM,2HACNC,OAAQ,CAAC,OAAQ,gBACjBlF,KAAM4E,EAAYC,OAClBM,KAAM,SAACtE,EAAM2E,GAAP,OAAgB,SAAAJ,GAAC,OAAIxE,EAASqF,WAAWb,EAAGvE,EAAM6E,SAASF,OAErE,CACIzF,GAAI,aACJG,KAAM,qBACN+E,KAAM,iJACNC,OAAQ,CAAC,cAAe,QACxBlF,KAAM4E,EAAYG,WAClBI,KAAM,SAACe,EAASC,GAAV,OAAqB,SAAAf,GAAC,OAAIxE,EAASwF,WAAWhB,EAAGc,EAASC,MAEpE,CACIpG,GAAI,aACJG,KAAM,cACN+E,KAAM,iJACNC,OAAQ,CAAC,cAAe,QACxBlF,KAAM4E,EAAYE,MAClBK,KAAM,SAACe,EAASC,GAAV,OAAqB,SAAAf,GAAC,OAAIA,EAAErE,WAAWmF,EAASC,MAE1D,CACIpG,GAAI,YACJG,KAAM,oBACN+E,KAAM,wHACNC,OAAQ,CAAC,cACTlF,KAAM4E,EAAYG,WAClBI,KAAM,SAAAkB,GAAG,OAAK,SAAAjB,GAAC,OAAIxE,EAASwF,WAAWhB,EAAGiB,EAAK,OAEnD,CACItG,GAAI,YACJG,KAAM,aACN+E,KAAM,yHACNC,OAAQ,CAAC,cACTlF,KAAM4E,EAAYE,MAClBK,KAAM,SAAAkB,GAAG,OAAK,SAAAjB,GAAC,OAAIA,EAAErE,WAAWsF,EAAK,OAEzC,CACItG,GAAI,SACJG,KAAM,SACN+E,KAAM,+GACNC,OAAQ,CAAC,UACTlF,KAAM4E,EAAYE,MAClBK,KAAM,SAAAkB,GAAG,OAAK,SAAAjB,GAAC,OAAIiB,EAAMjB,KAE7B,CACIrF,GAAI,SACJG,KAAM,SACN+E,KAAM,2GACNC,OAAQ,CAAC,UACTlF,KAAM4E,EAAYE,MAClBK,KAAM,SAAAkB,GAAG,OAAK,SAAAjB,GAAC,OAAIA,EAAIiB,KAE3B,CACItG,GAAI,cACJG,KAAM,cACN+E,KAAM,oFACNC,OAAQ,GACRlF,KAAM4E,EAAYE,MAClBK,KAAM,kBAAO,SAAAC,GAAC,OAAIA,EAAEV,MAAM,MAE9B,CACI3E,GAAI,eACJG,KAAM,eACN+E,KAAM,sIACNC,OAAQ,GACRlF,KAAM4E,EAAYE,MAClBK,KAAM,kBAAO,SAAAC,GAAC,OAAKA,EAAErC,SAAS,OAASqC,EAAErC,SAAS,MAAQ,GAAKqC,EAAEV,MAAM,EAAGU,EAAE/D,OAAS,MAEzF,CACItB,GAAI,cACJG,KAAM,cACN+E,KAAM,6DACNC,OAAQ,GACRlF,KAAM4E,EAAYC,OAClBM,KAAM,kBAAO,SAAAC,GAAC,OAAIxE,EAAS0F,aAAalB,MAE5C,CACIrF,GAAI,eACJG,KAAM,eACN+E,KAAM,4EACNC,OAAQ,GACRlF,KAAM4E,EAAYE,MAClBK,KAAM,kBAAO,SAAAC,GAAC,OAAIxE,EAAS2F,eAAenB,MAE9C,CACIrF,GAAI,WACJG,KAAM,WACN+E,KAAM,+DACNC,OAAQ,GACRlF,KAAM4E,EAAYC,OAClBM,KAAM,kBAAO,SAAAC,GAAC,OAAIxE,EAAS4F,UAAUpB,MAEzC,CACIrF,GAAI,gBACJG,KAAM,gBACN+E,KAAM,iEACNC,OAAQ,GACRlF,KAAM4E,EAAYC,OAClBM,KAAM,kBAAO,SAAAC,GAAC,OAAIxE,EAAS6F,eAAerB,MAE9C,CACIrF,GAAI,cACJG,KAAM,sBACN+E,KAAM,8KACNC,OAAQ,CAAC,gBAAiB,iBAC1BlF,KAAM4E,EAAYC,OAClBM,KAAM,SAACuB,EAAQC,GAAT,OAAoB,SAAAvB,GAAC,OAAIxE,EAASgG,YAAYxB,EAAGsB,EAAQC,MAEnE,CACI5G,GAAI,aACJG,KAAM,aACN+E,KAAM,mEACNC,OAAQ,GACRlF,KAAM4E,EAAYC,OAClBM,KAAM,kBAAO,SAAAC,GAAC,OAAI,MC/NLyB,E,kDACjB,WAAYvG,GAAQ,IAAD,8BACf,cAAMA,IACDwG,MAAQ,CAACC,MAAO,IAErB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAJL,E,yDAONC,GACT7G,KAAKC,MAAM6G,mBAAmBD,EAAEE,OAAOL,S,+BAIvC,OACI,sBAAKlH,UAAU,wBAAf,UACI,sBAAKA,UAAU,iCAAf,sBACa,sBAAMA,UAAU,cAAhB,6BAEb,sBAAKA,UAAU,iBAAf,UACI,uBAAOC,QAAQ,qBAAqBD,UAAU,gBAA9C,SACI,mBAAGA,UAAU,qCAEjB,wBAAQK,KAAK,qBAAqBH,GAAG,qBAAqBK,SAAUC,KAAK2G,aAAzE,SACKhC,EAAYP,KAAI,SAAA4C,GAAM,OACnB,wBAAQN,MAAOM,EAAOtH,GAAtB,SAAuDsH,EAAOnH,MAA/B,UAAYmH,EAAOtH,YAK9D,mBAAGF,UAAU,qBAAb,SACKQ,KAAKC,MAAMgH,WAAWrC,c,GA9BCtE,aCDvB4G,E,kDACjB,WAAYjH,GAAQ,IAAD,8BACf,cAAMA,IACDwG,MAAQ,CACTU,YAAa,IAGjB,EAAKC,kBAAoB,EAAKA,kBAAkBR,KAAvB,gBANV,E,8DASDS,GACdrH,KAAKsH,UAAS,SAAAC,GACVA,EAAUJ,YAAYE,EAAMN,OAAOlH,MAAQwH,EAAMN,OAAOL,SAE5D1G,KAAKC,MAAMuH,cAAcH,K,+BAGnB,IAAD,OACL,OACI,8BACI,uBAAMI,SAAUzH,KAAKC,MAAMwH,SAAU/H,GAAG,aAAxC,UACI,qBAAKF,UAAU,aAAf,SACKQ,KAAKC,MAAMgH,WAAWpC,OAAOT,KAAI,SAAAsD,GAAK,OACnC,sBAAKlI,UAAU,YAAf,UACI,wBAAOA,UAAU,cAAcC,QAAS,iBAAmB,EAAKQ,MAAMgH,WAAWvH,GAAK,IAAMgI,EAA5F,UACKA,EADL,MAAwG,SAAWA,GAGnH,uBACI7H,KAAM6H,EACNhI,GAAI,iBAAmB,EAAKO,MAAMgH,WAAWvH,GAAK,IAAMgI,EACxD/H,KAAK,OACLH,UAAU,qBAEVO,SAAU,EAAKqH,mBADV,SAAW,EAAKnH,MAAMgH,WAAWvH,GAAK,IAAMgI,GAGrD,yBAZ4B,OAASA,QAgBhD1H,KAAKC,MAAM0H,aACR,sBAAKnI,UAAU,gBAAf,UACI,mBAAGA,UAAU,2CADjB,iDAIJ,yBAAQA,UAAU,gBAAgBG,KAAK,SAAvC,mBACU,mBAAGH,UAAU,0C,GA7CEc,aCAvCsH,EAAc,IAECC,E,kDACjB,WAAY5H,GAAQ,IAAD,8BACf,cAAMA,IACDwG,MAAQ,CACTqB,WAAY,GAGhB,EAAKC,gBAAkB,EAAKA,gBAAgBnB,KAArB,gBACvB,EAAKoB,gBAAkB,EAAKA,gBAAgBpB,KAArB,gBACvB,EAAKqB,cAAgB,EAAKA,cAAcrB,KAAnB,gBACrB,EAAKsB,wBAA0B,EAAKA,wBAAwBtB,KAA7B,gBAThB,E,kEAYGuB,EAAWC,GAS7B,OARIpI,KAAKC,MAAMkE,UAAYgE,EAAUhE,SACjCnE,KAAKC,MAAMoI,YAAcF,EAAUE,WACnCrI,KAAKC,MAAMqI,cAAgBH,EAAUG,aACjCtI,KAAKsH,SAAS,CACVQ,WAAY,IAKpB9H,KAAKC,MAAMkE,UAAYgE,EAAUhE,SACjCnE,KAAKC,MAAMoI,YAAcF,EAAUE,WACnCrI,KAAKC,MAAMqI,cAAgBH,EAAUG,aACrCtI,KAAKyG,MAAMqB,aAAeM,EAAUN,a,wCAKxC9H,KAAKsH,SAAS,CACVQ,WAAY9H,KAAKyG,MAAMqB,WAAaF,M,wCAKxC5H,KAAKsH,SAAS,CACVQ,WAAY9H,KAAKyG,MAAMqB,WAAaF,M,sCAK3B,IAAD,OACNW,EAAUC,SAASC,cAAc,KACjCC,EAAO,IAAIC,KACb,CAAC3I,KAAKC,MAAMkE,QAAQC,KAAI,SAAAN,GAAM,OAC1BA,EAAOM,KAAK,SAAA5D,GAAI,OAEZA,QAA6CiD,IAArC,EAAKxD,MAAM2I,SAASC,OAAOrI,GAAsB,IAAO,EAAKP,MAAM2I,SAASC,OAAOrI,GAAS,OACtGK,KAAK,SACTA,KAAK,OACP,CAAClB,KAAM,eAGX4I,EAAQO,KAAOC,IAAIC,gBAAgBN,GACnCH,EAAQU,SAAW,yBACnBT,SAASU,KAAKC,YAAYZ,GAC1BA,EAAQa,U,8CAGYC,GAAa,IAAD,SAC5BC,EAAU,EADkB,cAEbD,GAFa,IAEhC,2BAA+B,CAAC,IAArB7I,EAAoB,aACciD,IAArCzD,KAAKC,MAAM2I,SAASC,OAAOrI,KAC3B8I,GAAWtJ,KAAKC,MAAM2I,SAASC,OAAOrI,KAJd,8BAShC,OAAgB,KAFhB8I,GAAWD,EAAWrI,SAEDqI,EAAW3H,OAAM,SAAAqD,GAAC,YAAsCtB,IAAlC,EAAKxD,MAAM2I,SAASC,OAAO9D,MAC3D,CACHwE,gBAAiB,4BAGlB,CACHA,gBAAgB,OAAD,SAAkB,GAAKD,EAAZ,KAAwB,IAAM,KAAO,IAAhD,kBAA6D5F,KAAK8F,IAAI,GAAI,GAAK,IAAOF,EAAU,KAAhG,S,+BAIb,IAAD,OACDG,GAAczJ,KAAKC,MAAMkE,QAAQzC,OAAM,SAAAoC,GAAM,OAAIA,EAAOpC,OAAM,SAAAlB,GAAI,YAAyCiD,IAArC,EAAKxD,MAAM2I,SAASC,OAAOrI,SACjGkJ,EAAe,CACfC,oBAAsBF,EAAa,qBAAuB,iBAG9D,OACI,sBAAKjK,UAAU,iBAAf,UACI,qBAAKA,UAAU,sBAAf,sBACA,sBAAKA,UAAU,kBAAf,UACMQ,KAAKC,MAAMkE,QAAQnD,OAAS,EAC1B,sBAAKxB,UAAU,gBAAf,UACI,sBAAMA,UAAU,uBAAhB,SAAwCQ,KAAKC,MAAMkE,QAAQnD,SAC1DhB,KAAKC,MAAMkE,QAAQnD,OAAS4G,GACzB,sBAAKpI,UAAU,0BAAf,cACMQ,KAAKyG,MAAMqB,WAAa,EAD9B,IACkCpE,KAAKkG,IAAI5J,KAAKyG,MAAMqB,WAAaF,EAAa5H,KAAKC,MAAMkE,QAAQnD,QADnG,UAOR,sBAAKxB,UAAU,2BAAf,UACI,qBAAKA,UAAU,qBAAf,gCACA,mBAAGA,UAAU,sCAIrB,gCACOQ,KAAKC,MAAMkE,QAAQnD,OAAS4G,GAAe5H,KAAKyG,MAAMqB,YAAcF,GACnE,wBACIpI,UAAU,wDACVW,QAASH,KAAK+H,gBAFlB,SAII,mBAAGvI,UAAU,wBAIlBQ,KAAKC,MAAMkE,QAAQnD,OAAS4G,GAAe5H,KAAKyG,MAAMqB,WAAa9H,KAAKC,MAAMkE,QAAQnD,OAAS4G,GAC9F,wBACIpI,UAAU,wDACVW,QAASH,KAAKgI,gBAFlB,SAII,mBAAGxI,UAAU,+BAM3BQ,KAAKC,MAAMkE,QAAQnD,OAAS,GAC1B,qBAAKxB,UAAU,kCAAf,SACI,wBACIA,UAAU,mDACVW,QAASH,KAAKiI,cAFlB,gCAQNjI,KAAKC,MAAMkE,QAAQnD,OAAS,GAC1B,qBAAKxB,UAAU,eAAeqK,MAAOH,EAArC,SACK1J,KAAKC,MAAMkE,QAAQE,MAAMrE,KAAKyG,MAAMqB,WAAY9H,KAAKyG,MAAMqB,WAAaF,GAAaxD,KAAI,SAACW,EAAGb,GAAJ,OACtF,eAAC,IAAM4F,SAAP,WACI,qBAAKtK,UAAU,iBAAf,SACK0E,EAAQ,EAAKuC,MAAMqB,WAAa,GADA5D,EAAQ,OAG7C,qBAAK1E,UAAU,eAAf,SACI,qBAAKA,UAAU,oBAAf,SACkB,IAAbuF,EAAE/D,OACC,qBAAKxB,UAAU,0BAAf,SACI,iCAAOuF,EAAE,GAAT,SAIJ,qBAAKvF,UAAU,0BAAf,SACI,iCAAOuF,EAAE,GAAT,IAAa,sBAAMvF,UAAU,eAAhB,SAAgC,WAA7C,IAA+DuF,EAAE,WAT9Cb,GAenC,qBAAK1E,UAAU,iBAAf,SACI,uBAAMA,UAAU,sBAAhB,cACMuF,EAAEX,KAAI,SAAA5D,GAAI,OAAIA,EAAKQ,UAAQH,KAAK,KADtC,QADiCqD,EAAQ,OAK3CuF,GACE,qBAAKjK,UAAU,gBAAsCqK,MAAO,EAAK3B,wBAAwBnD,GAAzF,SACI,sBAAMvF,UAAU,qBAAhB,SACKuF,EAAEX,KAAI,SAAA5D,GAAI,YAA0CiD,IAArC,EAAKxD,MAAM2I,SAASC,OAAOrI,GAAsB,SAAM,EAAKP,MAAM2I,SAASC,OAAOrI,MAAQK,KAAK,QAFnFqD,EAAQ,WAzB/BA,e,GA7IN5D,aCFrCyJ,EAAQ,CACV,CACIrD,MAAO,MACP7G,KAAM,OAEV,CACI6G,MAAO,SACP7G,KAAM,UAEV,CACI6G,MAAO,QACP7G,KAAM,UAIOmK,E,kDACjB,WAAY/J,GAAQ,IAAD,8BACf,cAAMA,IACDwG,MAAQ,CACTwD,YAAaF,EAAM,IAHR,E,qDAOT,IAAD,OACL,OACI,sBAAKvK,UAAU,iBAAf,UACI,sBAAMA,UAAU,4BAAhB,8BAGCuK,EAAM3F,KAAI,SAAAtD,GAAI,OACX,wBAAOtB,UAAU,uBAAjB,UACI,uBAAOA,UAAU,qBACbG,KAAK,QACL+G,MAAO5F,EAAK4F,MACZ7G,KAAK,eACLqK,eAAgB,EAAKzD,MAAMwD,YAAYvD,QAAU5F,EAAK4F,MAEtDvG,QAAS,EAAKF,MAAMkK,YACpBpK,SAAU,EAAKE,MAAMmK,cAFhBtJ,EAAK4F,OAId,sBAAMlH,UAAU,wBAGhB,sBAAMA,UAAU,iCAAhB,SACKsB,EAAKjB,MAD4CiB,EAAK4F,MAAQ,UAb1B5F,EAAK4F,iB,GAf3BpG,aCftB+J,E,kDACjB,WAAYpK,GAAQ,IAAD,8BACf,cAAMA,IACDwG,MAAQ,CACT6D,QAAS,EAAKrK,MAAMqK,SAHT,E,qDAQf,OACItK,KAAKC,MAAMqK,SACP,qBAAK9K,UAAU,0CAA0CkH,MAAM,eAAevG,QAASH,KAAKC,MAAMsK,aAAlG,SACI,sBAAK/K,UAAU,QAAf,UACI,sBAAKA,UAAU,aAAf,UACI,qBAAIA,UAAU,eAAd,UACI,mBAAGA,UAAU,iCADjB,sBAGA,wDAC2B,sBAAMA,UAAU,SAAhB,kBAD3B,OACmE,sBAAMA,UAAU,SAAhB,mBADnE,2JAIA,sDACyB,sBAAMA,UAAU,SAAhB,oBADzB,uGACmK,+CADnK,6GAIA,oKAIJ,wBAAQA,UAAU,gDAAgDkH,MAAM,eAAevG,QAASH,KAAKC,MAAMsK,aAA3G,kC,GA7BejK,aCAlBkK,E,WACjB,WAAYC,GAAO,oBACfzK,KAAKyK,KAAOA,EACZzK,KAAK6I,OAAS,GACd7I,KAAK0K,Q,qDAGAD,GACLzK,KAAKyK,KAAOA,EACZzK,KAAK0K,U,+BAIAC,GACL3K,KAAKyK,KAAOzK,KAAKyK,KAAKG,OAAOD,GAC7B3K,KAAK0K,U,kCAIGlK,GACRA,EAAOA,EAAKE,WAAW,MAAO,IAC9B,IAAImK,EAActK,EAASoC,UAAUnC,GAGjCsK,EAAetK,EAAKuK,MAAM,YAC1BC,GAAS,EAab,OAZqB,OAAjBF,IACAE,EAAQ3F,SAASyF,EAAa,GAAGzG,MAAM,MAI5B,IAAX2G,GAAgBH,EAAY7J,OAAS,SAEJyC,IAA7BzD,KAAK6I,OAAOgC,IAA8B7K,KAAK6I,OAAOgC,GAAeG,KACrEhL,KAAK6I,OAAOgC,GAAeG,GAI5BH,I,8BAUF,IAAD,OACJ7K,KAAKyK,KAAOzK,KAAKyK,KAAKrG,KAAI,SAAA5D,GAAI,OAC1B,EAAKyK,YAAYzK,MAGrBR,KAAKyK,KAAOzK,KAAKyK,KAAKS,QAAO,SAAAnG,GAAC,OAAIA,EAAE/D,OAAS,KAC7ChB,KAAKyK,KAAK3J,OACVd,KAAKyK,KAAL,YAAgB,IAAInG,IAAItE,KAAKyK,S,mCAK7B,IAAIU,EAAWnL,KAAKyK,KAAKzJ,OACzB,OAAOhB,KAAKyK,KAAK/G,KAAK0H,MAAM1H,KAAK2H,SAAWF,M,+BAIvCrG,GACL,OAAO,IAAI0F,EAASxK,KAAKyK,KAAKS,OAAOpG,M,+BAIhCA,GACL,IADW,EACPwG,EAAc,GADP,cAGQtL,KAAKyK,MAHb,IAGX,2BAA8B,CAAC,IAApBjK,EAAmB,QACtBsE,EAAKtE,IACL8K,EAAYrH,KAAKzD,IALd,8BASX,OAAO8K,I,+BAIFxG,EAAMtE,GACX,MAAO,CAACU,MAAOV,EAAMW,MAAO2D,EAAKtE,M,+BAI5BsE,GAAO,IAAD,OAEPyG,EAAYvL,KAAKyK,KAAKrG,KAAI,SAAA5D,GAAI,OAAI,EAAKgL,SAAS1G,EAAMtE,OAG1D+K,EAAYA,EAAUL,QAAO,SAAA1K,GAAI,OAAIA,EAAKU,QAAUV,EAAKW,UAG/CL,MAAK,SAACiE,EAAG0G,GAAJ,OAAU1G,EAAE5D,MAAMuK,cAAcD,EAAEtK,UAOjD,IALA,IAAIwK,EAAc,GACdC,EAAc,EACdC,EAAc,EAGXD,EAAcL,EAAUvK,QAAU6K,EAAc7L,KAAKyK,KAAKzJ,QAAQ,CACrE,IAAI8K,EAAcP,EAAUK,GACxBG,EAAc/L,KAAKyK,KAAKoB,GAExBE,EAAcD,EAAY3K,MAC1ByK,IACOG,IAAgBD,EAAY3K,OACnCwK,EAAY1H,KAAK6H,GACjBF,KAEAC,IAMR,OAFAF,EAAY7K,MAAK,SAACiE,EAAG0G,GAAJ,OAAU1G,EAAE7D,MAAMwK,cAAcD,EAAEvK,UAE5CyK,I,oCAIG7G,GAEV,IAFgB,EAEZyG,EAAY,GAFA,cAGEvL,KAAKyK,MAHP,IAGhB,2BAA6B,CAAC,IAAD,EAApBvJ,EAAoB,sBACP4D,EAAK5D,IADE,IACzB,2BAA+B,CAAC,IAAvBC,EAAsB,QAC3BoK,EAAUtH,KAAK,CAAC/C,MAAOA,EAAOC,MAAOA,KAFhB,gCAHb,+BAUhBoK,EAAYA,EAAUL,QAAO,SAAA1K,GAAI,OAAIA,EAAKU,QAAUV,EAAKW,UAG/CL,MAAK,SAACiE,EAAG0G,GAAJ,OAAU1G,EAAE5D,MAAMuK,cAAcD,EAAEtK,UAOjD,IALA,IAAIwK,EAAc,GACdC,EAAc,EACdC,EAAc,EAGXD,EAAcL,EAAUvK,QAAU6K,EAAc7L,KAAKyK,KAAKzJ,QAAQ,CACrE,IAAI8K,EAAcP,EAAUK,GACxBG,EAAc/L,KAAKyK,KAAKoB,GAExBE,EAAcD,EAAY3K,MAC1ByK,IACOG,IAAgBD,EAAY3K,OACnCwK,EAAY1H,KAAK6H,GACjBF,KAEAC,IAMR,OAFAF,EAAY7K,MAAK,SAACiE,EAAG0G,GAAJ,OAAU1G,EAAE7D,MAAMwK,cAAcD,EAAEvK,UAE5CyK,M,aCnJTK,EAAkB,qBAGHC,E,kDACjB,WAAYhM,GAAQ,IAAD,8BACf,cAAMA,IACDwG,MAAQ,CACTQ,WAAYtC,EAAY,GACxBwC,YAAa,GACbhD,QAAS,GACT+H,YAAY,EACZtD,SAAU,IAAI4B,EAAS2B,KACvBC,mBAAmB,EACnBC,gBAAgB,EAChBC,UAAW,CAACN,GACZ3D,UAAW,MACXC,aAAa,EACbX,aAAa,EACb4E,cAAc,GAElB,EAAKC,uBAAyB,EAAKA,uBAAuB5F,KAA5B,gBAC9B,EAAKQ,kBAAoB,EAAKA,kBAAkBR,KAAvB,gBACzB,EAAK6F,iBAAmB,EAAKA,iBAAiB7F,KAAtB,gBACxB,EAAK8F,sBAAwB,EAAKA,sBAAsB9F,KAA3B,gBAC7B,EAAK+F,qBAAuB,EAAKA,qBAAqB/F,KAA1B,gBAC5B,EAAKgG,kBAAoB,EAAKA,kBAAkBhG,KAAvB,gBACzB,EAAKiG,kBAAoB,EAAKA,kBAAkBjG,KAAvB,gBACzB,EAAKkG,aAAe,EAAKA,aAAalG,KAAlB,gBACpB,EAAKmG,iBAAmB,EAAKA,iBAAiBnG,KAAtB,gBACxB,EAAKoG,gBAAkB,EAAKA,gBAAgBpG,KAArB,gBACvB,EAAKqG,UAAY,EAAKA,UAAUrG,KAAf,gBACjB,EAAKsG,WAAa,EAAKA,WAAWtG,KAAhB,gBA3BH,E,mEA8BIuG,GACnB,IADmC,EAC/BC,EAAgBzI,EAAY0I,MAAK,SAAAtI,GAAC,OAAIA,EAAErF,KAAOyN,KAC/CG,EAAiB,GAFc,cAGjBF,EAAcvI,QAHG,IAGnC,2BAAwC,CACpCyI,EADoC,SACZ,IAJO,8BAMnCtN,KAAKsH,SAAS,CACVL,WAAYmG,EACZjG,YAAamG,EACb3F,aAAa,IAGjBa,SAAS+E,eAAe,cAAcC,U,wCAGxBnG,GACdrH,KAAKsH,UAAS,SAAAC,GAEV,OADAA,EAAUJ,YAAYE,EAAMN,OAAOlH,MAAQwH,EAAMN,OAAOL,MACjDa,O,mCAIFF,GAAQ,IAAD,MAChBA,EAAMoG,iBAENzN,KAAKsH,SAAS,CACVK,aAAa,IAGjB,IAPgB,EAOZ+F,EAAiB,GAPL,cAQI1N,KAAKyG,MAAMQ,WAAWpC,QAR1B,IAQhB,2BAAkD,CAAC,IAAxC6C,EAAuC,QAC1CiG,EAAa3N,KAAKyG,MAAMU,YAAYO,GACxC,GAAmB,KAAfiG,QAAoClK,IAAfkK,EASrB,YAPA3N,KAAKsH,SAAS,CACVK,aAAa,IAQrBgG,EAAaA,EAAWlN,cAAcC,WAAW,IAAK,IACtDgN,EAAezJ,KAAK0J,IAtBR,8BAyBhB,IAAIxJ,EAAU,GAEd,IACI,OAAQnE,KAAKyG,MAAMQ,WAAWtH,MAC1B,KAAK4E,EAAYC,OACbL,EAAUnE,KAAKyG,MAAMmC,SAASgF,UAAS,EAAA5N,KAAKyG,MAAMQ,YAAWnC,KAAtB,QAA8B4I,IAAiBtJ,KAAI,SAAAW,GAAC,MAAI,CAACA,MAChG,MACJ,KAAKR,EAAYE,MACbN,EAAUnE,KAAKyG,MAAMmC,SAASiF,UAAS,EAAA7N,KAAKyG,MAAMQ,YAAWnC,KAAtB,QAA8B4I,IAAiBtJ,KAAI,SAAA0J,GAAI,MAAI,CAACA,EAAK5M,MAAO4M,EAAK3M,UACpH,MACJ,KAAKoD,EAAYG,WACbP,EAAUnE,KAAKyG,MAAMmC,SAASmF,eAAc,EAAA/N,KAAKyG,MAAMQ,YAAWnC,KAAtB,QAA8B4I,IAAiBtJ,KAAI,SAAA0J,GAAI,MAAI,CAACA,EAAK5M,MAAO4M,EAAK3M,WAKnI,MAAO6M,GAQL,YANAhO,KAAKsH,SAAS,CACVK,aAAa,IAQrB3H,KAAKsH,SAAS,CACVnD,QAASA,EACT+H,YAAY,IAGhBlM,KAAKiO,YAAYjO,KAAKyG,MAAM4B,a,uCAGfhB,GACb,IAAIqB,EAAOrB,EAAMN,OAAOmH,MAAM,GAM9B,GAJAlO,KAAKsH,SAAS,CACV6G,eAAe,IAGfzF,EAAM,CACN,IAAI0F,EAAS,IAAIC,WACjBD,EAAOE,WAAW5F,GAElB0F,EAAOG,OAAS,WAEZ,IAAIC,EAAWJ,EAAOtK,OAAOnD,MAAM,MACnCX,KAAK4M,kBAAkB4B,EAAU9F,EAAK7I,OACxC+G,KAAK5G,MAEPoO,EAAOK,QAAU,WAEbzO,KAAK0O,sBACP9H,KAAK5G,S,2CAKXA,KAAKsH,SAAS,CACV8E,mBAAmB,EACnB+B,eAAe,M,8CAKnBnO,KAAK4M,kBAAkBT,IAASH,K,wCAGlBwC,EAAUG,GACxB,IAAIC,EAAe5O,KAAKyG,MAAM6F,UAY9B,GAXItM,KAAKyG,MAAM4F,eACNuC,EAAa3L,SAAS0L,IACvBC,EAAa3K,KAAK0K,GAGtBC,EAAe,CAACD,GAEpB3O,KAAKsH,SAAS,CACVgF,UAAWsC,IAGX5O,KAAKyG,MAAM4F,eACXrM,KAAKyG,MAAMmC,SAASiG,SAASL,OAC1B,CACH,IAAIM,EAAc,IAAItE,EAASgE,GAC/BxO,KAAKsH,SAAS,CACVsB,SAAUkG,IAGlB9O,KAAKsH,SAAS,CACV8E,mBAAmB,EACnBC,gBAAgB,M,6CAKpBrM,KAAKsH,SAAS,CACV8E,mBAAmB,EACnBC,gBAAgB,M,0CAKpBrM,KAAKsH,SAAS,CACV8E,mBAAmB,EACnBC,gBAAgB,M,uCAIPhF,GACbrH,KAAKsH,SAAS,CACVe,UAAWhB,EAAMN,OAAOL,MACxB4B,aAAa,IAEjBtI,KAAKiO,YAAY5G,EAAMN,OAAOL,S,sCAGlBW,GACZ,IAAI0H,EAAc1H,EAAMN,OAAOL,MAC3B1G,KAAKyG,MAAM4B,YAAc0G,GACzB/O,KAAKsH,SAAS,CACVgB,aAActI,KAAKyG,MAAM6B,YACzBnE,QAASnE,KAAKyG,MAAMtC,QAAQvD,c,kCAK5ByH,GAAY,IAAD,OACD,QAAdA,EACArI,KAAKsH,UAAS,SAAA0H,GAMV,OAJAA,EAAS7K,QAAQrD,MAAK,SAACmO,EAAGC,GAAJ,OAAUD,EAAE,GAAGvD,cAAcwD,EAAE,OACjDF,EAAS1G,aACT0G,EAAS7K,QAAQvD,UAEdoO,KAEU,WAAd3G,EACPrI,KAAKsH,UAAS,SAAA0H,GAEV,IAFuB,IAAD,WAEbjO,GACLiO,EAAS7K,QAAQrD,MAAK,SAACmO,EAAGC,GAAJ,OAAWA,EAAEnO,GAAGC,OAASiO,EAAElO,GAAGC,WAD/CD,EAAIiO,EAAS7K,QAAQ,GAAGnD,OAAS,EAAGD,GAAK,EAAGA,IAAM,EAAlDA,GAOT,OAHIiO,EAAS1G,aACT0G,EAAS7K,QAAQvD,UAEdoO,KAEU,UAAd3G,GACPrI,KAAKsH,UAAS,SAAA0H,GAYV,OAVAA,EAAS7K,QAAQrD,MAAK,SAACmO,EAAGC,GAAJ,OAClBA,EAAEC,QAAO,SAACC,EAAGC,GAAJ,OACLD,QAAuC3L,IAAlC,EAAKgD,MAAMmC,SAASC,OAAOwG,GAAmB,EAAI,EAAK5I,MAAMmC,SAASC,OAAOwG,MACnF,GAAKJ,EAAEE,QAAO,SAACC,EAAGC,GAAJ,OACbD,QAAuC3L,IAAlC,EAAKgD,MAAMmC,SAASC,OAAOwG,GAAmB,EAAI,EAAK5I,MAAMmC,SAASC,OAAOwG,MACnF,MAEHL,EAAS1G,aACT0G,EAAS7K,QAAQvD,UAEdoO,O,kCAMfhP,KAAKsH,SAAS,CACViF,cAAc,M,iCAIXlF,GACHA,EAAMN,OAAOvH,UAAUyD,SAAS,iBAChCjD,KAAKsH,SAAS,CACViF,cAAc,M,+BAMtB,OACI,gCACI,sBAAK/M,UAAU,cAAf,UACI,cAAC,EAAD,CACI8K,QAAStK,KAAKyG,MAAM8F,aACpBhC,aAAcvK,KAAKkN,aAGtBlN,KAAKyG,MAAM0H,eACR,sBAAKmB,MAAM,gBAAX,UACI,mBAAG9P,UAAU,2CADjB,2DAKHQ,KAAKyG,MAAM2F,kBACR,8BACI,cAAC,EAAD,CACIlM,aAAcF,KAAKyM,iBACnBpM,kBAAmBL,KAAK0M,sBACxBtM,YAAaJ,KAAKiN,cAI1B,sBAAKzN,UAAU,gCAAf,UACI,sBAAKA,UAAU,sBAAf,6BACqBQ,KAAKyG,MAAM6F,UAAUtL,OAAS,EAAI,IAAM,GAD7D,OAGChB,KAAKyG,MAAM6F,UAAUlI,KAAI,SAAAmL,GAAQ,OAC9B,qBAAoB/P,UAAW,iBAAoB+P,IAAavD,EAAmB,mBAAqB,IAAxG,SACKuD,GADKA,MALlB,IAUK,wBAAQ/P,UAAU,+CAA+CW,QAASH,KAAK6M,kBAA/E,wBAVL,MAaK,wBAAQrN,UAAU,kDAAkDW,QAASH,KAAK2M,qBAAlF,mBAbL,UAqBR,sBAAKnN,UAAU,8BAAf,UACI,qBAAKA,UAAW,kBAAoBQ,KAAKyG,MAAM2F,kBAAoB,GAAK,yBAExE,cAAC,EAAD,CACItF,mBAAoB9G,KAAKwM,uBACzBvF,WAAYjH,KAAKyG,MAAMQ,aAG3B,cAAC,EAAD,CACIA,WAAYjH,KAAKyG,MAAMQ,WACvBE,YAAanH,KAAKyG,MAAMU,YACxBK,cAAexH,KAAKoH,kBACpBK,SAAUzH,KAAK8M,aACfnF,YAAa3H,KAAKyG,MAAMkB,iBAIhC,qBAAKnI,UAAU,yBAAf,SACI,sBAAKA,UAAU,qBAAf,UACI,qBAAKA,UAAW,kBAAoBQ,KAAKyG,MAAM2F,kBAAoB,GAAK,yBAExE,cAAC,EAAD,CACIhC,aAAcpK,KAAK+M,iBACnB5C,YAAanK,KAAKgN,kBAGpBhN,KAAKyG,MAAMyF,YACT,cAAC,EAAD,CACI/H,QAASnE,KAAKyG,MAAMtC,QACpBkE,UAAWrI,KAAKyG,MAAM4B,UACtBC,YAAatI,KAAKyG,MAAM6B,YACxBM,SAAU5I,KAAKyG,MAAMmC,uB,GAjVbtI,aC2BzBkP,MAzCf,WACE,OACE,sBAAKhQ,UAAU,MAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,yBAAQA,UAAU,SAAlB,UACE,oBAAGsJ,KAAK,cAActJ,UAAU,QAAhC,UACE,mBAAGA,UAAU,+BACb,sBAAMA,UAAU,qBAAhB,kBACA,uBAAMA,UAAU,qBAAhB,mBAA2C,+CAE7C,qBAAKA,UAAU,WAAf,wCACA,sBAAKA,UAAU,cAAf,UACE,uBAAMA,UAAU,SAAhB,gBAA4B,mBAAGsJ,KAAK,uBAAuB2G,IAAI,sBAAsB1I,OAAO,SAASvH,UAAU,cAAnF,8BAC5B,sBAAMA,UAAU,SAAhB,sBACA,mBAAGsJ,KAAK,gCAAgC2G,IAAI,sBAAsB1I,OAAO,SAAzE,SAAkF,mBAAGvH,UAAU,qBAC/F,sBAAMA,UAAU,SAAhB,sBACA,mBAAGsJ,KAAK,wCAAwC2G,IAAI,sBAAsB1I,OAAO,SAASvH,UAAU,cAApG,oCAGJ,uBACA,sBAAKA,UAAU,aAAf,UACI,mBAAGA,UAAU,sCACb,sBAAMA,UAAU,eAAhB,wDAIN,cAAC,EAAD,IAEA,yBAAQA,UAAU,iBAAlB,UACE,oBAAGA,UAAU,iBAAb,mBACK,IAAIkQ,MAAOC,cADhB,4BAC+C,mBAAG7G,KAAK,uBAAuB2G,IAAI,sBAAsB1I,OAAO,SAAhE,0BAD/C,WAC2I,mBAAG+B,KAAK,gCAAgC2G,IAAI,sBAAsB1I,OAAO,SAAzE,SAAkF,mBAAGvH,UAAU,qBAD1O,WACsQ,mBAAGsJ,KAAK,6CAA6C2G,IAAI,sBAAsB1I,OAAO,SAAtF,SAA+F,mBAAGvH,UAAU,uBAElX,uEACwC,mBAAGsJ,KAAK,gCAAgC2G,IAAI,sBAAsB1I,OAAO,SAASvH,UAAU,cAA5F,qBADxC,OACiK,mBAAGsJ,KAAK,gCAAgCtJ,UAAU,cAAlD,mBADjK,iBC9BRoQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtH,SAAS+E,eAAe,W","file":"static/js/main.ce1c5357.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class WordlistUploadButton extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"wordlist-choices\">\n                    <div className=\"upload-list-wrapper\">\n                        <label htmlFor=\"file-upload\" className=\"wordlist-box upload-list\">\n                            <i className=\"fas fa-file-upload wordlist-icon\"></i>\n                            <div className=\"wordlist-label wordlist-label-upload\">Upload<br/>your own<br/>wordlist</div>\n                        </label>\n                            <input\n                            id=\"file-upload\"\n                            type=\"file\"\n                            accept=\".txt,.dict\"\n                            name=\"myFile\"\n                            text=\"Upload Wordlist\"\n                            onChange={this.props.onFileChange}\n                        />\n                        <div className=\"upload-info-wrapper\">\n                            <button className=\"linky-button upload-info\" onClick={this.props.onOpenModal}>\n                                <i className=\"fas fa-info-circle info-icon\"></i>\n                                &nbsp;<div className=\"link-border\">About uploading</div>\n                            </button>\n                        </div>\n                    </div>\n                    <span className=\"or\"> or </span>\n                    <button className=\"wordlist-box dictionary\" onClick={this.props.onDictionaryClick}>\n                        <div className=\"wordlist-label wordlist-label-dictionary\">Use the<br/>English<br/>dictionary</div>\n                        <i className=\"fas fa-book wordlist-icon\"></i>\n                    </button>\n                </div>\n            </div>\n            \n        )\n    }\n}\n","export default class Wordplay {\n    // returns only the letters in the word\n    static cleanWord(word) {\n        return word.toUpperCase().replaceAll(/[^\\p{L}]/gu, '')\n    }\n\n    // returns reverse word\n    static reverse(word) {\n        return word.split('').reverse().join('')\n    }\n\n    // return sorted word\n    static sort(word) {\n        return word.split('').sort().join('');\n    }\n\n    // returns letter bank\n    static getLetterBank(word) {\n        word = this.sort(word)\n        for (var i = 1; i < word.length; i++) {\n            if (word[i] === word[i - 1]) {\n                word = word.substring(0,i) + word.substring(i+1, word.length);\n                i--;\n            }\n        }\n        return word\n    }\n\n    // returns whether word1 and word2 are anagrams\n    static areAnagrams(word1, word2) {\n        var sortedWord1 = this.sort(word1)\n        var sortedWord2 = this.sort(word2)\n        return sortedWord1 === sortedWord2;\n    }\n\n    // returns whether word1 contains an anagram of word2\n    static containsAnagram(word1, word2) {\n        var sortedWord2 = this.sort(word2)\n        for (var i = 0; i < word1.length - word2.length + 1; i++) {\n            var word1Substring = word1.substring(i, i + word2.length);\n            if (word1Substring === word2) {\n                continue;\n            }\n            var sortedWord1Substring = this.sort(word1Substring)\n            if (sortedWord1Substring === sortedWord2) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // returns whether the word matches the regex, case insensitively\n    static matchesRegex(word, regex) {\n        var caseInsensitiveRegex;\n        caseInsensitiveRegex = new RegExp(regex, 'i');\n        return caseInsensitiveRegex.test(word);\n    }\n\n    // returns whether the input is a valid simple pattern\n    static isValidPattern(pattern) {\n        return pattern.split('').every(letter => /[\\w?*]/.test(letter))\n    }\n\n    // returns regex equivalent to given simple pattern\n    static patternToRegex(pattern) {\n        return '^' + pattern.replaceAll('?', '.').replaceAll('*', '.*') + '$';\n    }\n\n    // returns whether the word matchers the given simple pattern, case insensitively\n    static matchesPattern(word, pattern) {\n        return this.matchesRegex(word, this.patternToRegex(pattern))\n    }\n\n    // returns whether word2 contains only and all the letters in word1\n    static isLetterBank(word1, word2) {\n        return word1 !== word2 && this.getLetterBank(word1) === this.getLetterBank(word2)\n    }\n\n    // returns whether word can be made using only the letters in tiles\n    static isScrabbleWord(word, tiles) {\n        // sort letters of tiles and word\n        tiles = this.sort(tiles)\n        word = this.sort(word)\n\n        var tile_counter = 0;\n        var word_counter = 0;\n        var fail = false;\n\n        while (word_counter < word.length && tile_counter < tiles.length) {\n            var tile_current = tiles[tile_counter];\n            var word_current = word[word_counter];\n\n            if (tile_current > word_current) {\n                fail = true;\n                break;\n            } else if (tile_current === word_current) {\n                tile_counter++;\n                word_counter++;\n            } else {\n                tile_counter++;\n            }\n        }\n\n        return (word_counter === word.length && !fail)\n    }\n\n    // returns whether word is supervocalic\n    static isSupervocalic(word) {\n        return (\n            this.isScrabbleWord('AEIOU', word) &&\n            !this.isScrabbleWord('AA', word) &&\n            !this.isScrabbleWord('EE', word) &&\n            !this.isScrabbleWord('II', word) &&\n            !this.isScrabbleWord('OO', word) &&\n            !this.isScrabbleWord('UU', word)\n        )\n    }\n\n    // strips word of its vowels\n    static removeVowels(word) {\n        return word.replaceAll(/[AEIOUY]/ig, '')\n    }\n\n    // strips word of its consonants\n    static removeConsonants(word) {\n        return word.replaceAll(/[BCDFGHJKLMNPQRSTVWXZ]/ig, '')\n    }\n\n    // returns whether word1 and word2 are a consonantcy\n    static isConsonantcy(word1, word2) {\n        return this.removeVowels(word1) === this.removeVowels(word2)\n    }\n\n    // returns whether word1 and word2 are a vowelcy\n    static isVowelcy(word1, word2) {\n        return this.removeConsonants(word1) === this.removeConsonants(word2)\n    }\n\n    // returns whether word is flanked by the bread word\n    static isSandwichWord(word, bread) {\n        if (word.length <= bread.length) {\n            return false\n        }\n\n        for (var i = 1; i < bread.length; i++) {\n            if (word.startsWith(bread.substring(0,i)) && word.endsWith(bread.substring(i, bread.length))) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // returns whether word1 is spread inside word2\n    static isSpread(word1, word2) {\n        if (word1 === word2) {\n            return false;\n        }\n        word1 = this.cleanWord(word1) // remove non-alpha characters\n        var regex = \"^.*\" + word1.split('').join('.*') + \".*$\"\n        return (new RegExp(regex)).test(word2)\n    }\n\n    // returns whether word can be made using only the limited alphabet\n    static usesLettersFrom(word, alphabet) {\n        alphabet = this.cleanWord(alphabet) // remove non-alpha characters\n        var regex = \"^[\" + alphabet + \"]*$\"\n        return (new RegExp(regex)).test(word)\n    }\n\n    // returns whether word can be spelled with given spelling bee puzzle\n    static spellingBee(word, centerLetter, outerLetters) {\n        var allLetters = (centerLetter + outerLetters)\n        var wordLetters = word.split('')\n        return word.includes(centerLetter) && wordLetters.every(letter => allLetters.includes(letter)) && word.length >= 4\n    }\n\n    // returns whether word is a palindrome\n    static isPalindrome(word) {\n        return word === this.reverse(word)\n    }\n\n    // returns reversed word if alphabetically greater, or nothing otherwise\n    static getSemordnilap(word) {\n        var reversed = this.reverse(word)\n        if (reversed > word) {\n            return reversed;\n        } else {\n            // return something that definitely won't be in the wordlist\n            return '';\n        }\n    }\n\n    // returns whether word is an isogram\n    static isIsogram(word) {\n        return this.getLetterBank(word).length === word.length\n    }\n\n    // returns Hamming distance between two words\n    static getDistance(word1, word2) {\n        if (word1.length !== word2.length) {\n            return -1;\n        }\n\n        let distance = 0\n        for (let i = 0; i < word1.length; i++) {\n            if (word1[i] !== word2[i]) {\n                distance++;\n            }\n        }\n        return distance;\n    }\n\n    // returns whether word1 and word2 are some Hamming distance away\n    static isDistance(word1, word2, distance) {\n        if (isNaN(distance)) {\n            throw new Error();\n        }\n        return this.getDistance(word1, word2) === distance;\n    }\n\n    // returns whether word1 and word2 are n distance away from being anagrams\n    static areAlmostAnagrams(word1, word2, n) {\n        if (word1 === word2) {\n            return false\n        }\n        if (word1.length !== word2.length) {\n            return false;\n        }\n        if (isNaN(n)) {\n            throw new Error();\n        }\n\n        let letters = {};\n\n        for (const letter of word1) {\n            if (letters[letter] === undefined) {\n                letters[letter] = 1\n            } else {\n                letters[letter]++;\n            }\n        }\n\n        for (const letter of word2) {\n            if (letters[letter] === undefined) {\n                letters[letter] = -1\n            } else {\n                letters[letter]--;\n            }\n        }\n\n        let distance = 0\n\n        for (const letter in letters) {\n            distance += Math.abs(letters[letter])\n        }\n\n        return distance / 2 === n;\n    }\n\n    // returns array of all possible words formed by replacing one instance of a string with another\n    static replaceOne(word, from, to) {\n        from = this.cleanWord(from); // remove non-alpha characters\n        \n        let regex = new RegExp(from, 'gi'), result, indices = [];\n        while ( (result = regex.exec(word)) ) {\n            indices.push(result.index);\n        }\n\n        let results = indices.map(i => word.slice(0, i) + to + word.slice(i + from.length))\n        results = [...new Set(results)] // remove duplicates\n        return results;\n    }\n}","const searchTypes = {\n    SINGLE: 0,\n    PAIRS: 1,\n    MULTIPAIRS: 2\n}\n\nexport default searchTypes;","import Wordplay from './wordplay.js';\nimport searchTypes from './searchtypes.js';\n\nconst searchModes = [\n    {\n        id: \"simple-search\",\n        name: \"Simple search\",\n        desc: \"Words matching the given pattern of letters, where ? denotes one wildcard letter and * denotes any number of wildcard letters; e.g. ?WE*E yields AWESOME.\",\n        fields: [\"Pattern\"],\n        type: searchTypes.SINGLE,\n        func: pattern => (x => Wordplay.matchesPattern(x, pattern))\n    },\n    {\n        id: \"regex\",\n        name: \"Regex\",\n        desc: \"Words matching the given regex, or regular expression; e.g. ^S.*[AEIOU]{4} yields SEQUOIA. If you're new to regex, regexone.com has a great tutorial.\",\n        fields: [\"Regex\"],\n        type: searchTypes.SINGLE,\n        func: regex => (x => Wordplay.matchesRegex(x, regex))\n    },\n    {\n        id: \"anagram\",\n        name: \"Anagram\",\n        desc: \"Words formed by rearranging the letters of the given word; e.g. LINDSEY yields SNIDELY.\",\n        fields: [\"Word\"],\n        type: searchTypes.SINGLE,\n        func: word => (x => Wordplay.areAnagrams(x, word) && x !== word)\n    },\n    {\n        id: \"hidden-anagram\",\n        name: \"Hidden anagram\",\n        desc: \"Words containing an anagram of the given word; e.g. HOLLY yields TALLYHO.\",\n        fields: [\"Word\"],\n        type: searchTypes.SINGLE,\n        func: word => (x => Wordplay.containsAnagram(x, word))\n    },\n    {\n        id: \"subanagram\",\n        name: \"Subanagram\",\n        desc: \"Words that can be made from the letters in the given word; e.g. PARENTING yields PREGNANT.\",\n        fields: [\"Word\"],\n        type: searchTypes.SINGLE,\n        func: tiles => (x => Wordplay.isScrabbleWord(x, tiles))\n    },\n    {\n        id: \"almost-anagram\",\n        name: \"Almost anagram\",\n        desc: \"Words that become an anagram of the given word if you change a certain number of letters; e.g. ANAGRAM with 1 yields GRANDMA.\",\n        fields: [\"Word\", \"# of changes\"],\n        type: searchTypes.SINGLE,\n        func: (word, num) => (x => Wordplay.areAlmostAnagrams(x, word, parseInt(num)))\n    },\n    {\n        id: \"letter-bank\",\n        name: \"Letter bank\",\n        desc: \"Words with the same set of letters as the given word, ignoring repeated letters; e.g. TIME MACHINE yields MATHEMATICIAN.\",\n        fields: [\"Word\"],\n        type: searchTypes.SINGLE,\n        func: word => (x => Wordplay.isLetterBank(x, word))\n    },\n    {\n        id: \"required-letters\",\n        name: \"Required letters\",\n        desc: \"Words that contain all of the given letters, regardless of order; e.g. RSTUVW yields LIVERWURST.\",\n        fields: [\"Letters\"],\n        type: searchTypes.SINGLE,\n        func: letters => (x => Wordplay.isScrabbleWord(letters, x))\n    },\n    {\n        id: \"limited-alphabet\",\n        name: \"Limited alphabet\",\n        desc: \"Words that can be written using only the given letters, any number of times; e.g. ABCDEFG yields CABBAGE.\",\n        fields: [\"Letters\"],\n        type: searchTypes.SINGLE,\n        func: alphabet => (x => Wordplay.usesLettersFrom(x, alphabet))\n    },\n    {\n        id: \"spread\",\n        name: \"Spread letters\",\n        desc: \"Words that contain the given letters in order, but not necessarily consecutively; e.g. RAUCOUS yields RAMBUNCTIOUS.\",\n        fields: [\"Letters\"],\n        type: searchTypes.SINGLE,\n        func: word => (x => Wordplay.isSpread(word, x))\n    },\n    {\n        id: \"sandwich\",\n        name: \"Sandwich word\",\n        desc: \"Words formed by slicing the given word in two and adding letters inside; e.g. CRUST yields CRUMBLIEST.\",\n        fields: [\"Bread\"],\n        type: searchTypes.SINGLE,\n        func: word => (x => Wordplay.isSandwichWord(x, word))\n    },\n    {\n        id: \"consonantcy\",\n        name: \"Consonantcy\",\n        desc: \"Words with the same consonants in the same order as the given word; e.g. AMONG US yields MONGOOSE.\",\n        fields: [\"Word\"],\n        type: searchTypes.SINGLE,\n        func: word => (x => Wordplay.isConsonantcy(x, word))\n    },\n    {\n        id: \"vowelcy\",\n        name: \"Vowelcy\",\n        desc: \"Words with the same vowels in the same order as the given word; e.g. SEQUOIA yields EUPHORIA.\",\n        fields: [\"Word\"],\n        type: searchTypes.SINGLE,\n        func: word => (x => Wordplay.isVowelcy(x, word))\n    },\n    {\n        id: \"letterchanges\",\n        name: \"Letter changes\",\n        desc: \"Words that result from changing a certain number of letters in the given word; e.g. PERPETRATE with 1 yields PERPETUATE.\",\n        fields: [\"Word\", \"# of changes\"],\n        type: searchTypes.SINGLE,\n        func: (word, num) => (x => Wordplay.isDistance(x, word, parseInt(num)))\n    },\n    {\n        id: \"replaceone\",\n        name: \"Replace one (new!)\",\n        desc: \"Pairs of words formed by replacing one occurrence of one group of letters with another; e.g. replacing S with GR yields SOUNDS → GROUNDS.\",\n        fields: [\"Replace one\", \"With\"],\n        type: searchTypes.MULTIPAIRS,\n        func: (replace, with_) => (x => Wordplay.replaceOne(x, replace, with_))\n    },\n    {\n        id: \"replaceall\",\n        name: \"Replace all\",\n        desc: \"Pairs of words formed by replacing all occurrences of one group of letters with another; e.g. replacing S with SS yields POSES → POSSESS.\",\n        fields: [\"Replace all\", \"With\"],\n        type: searchTypes.PAIRS,\n        func: (replace, with_) => (x => x.replaceAll(replace, with_))\n    },\n    {\n        id: \"deleteone\",\n        name: \"Delete one (new!)\",\n        desc: \"Pairs of words formed by removing one instance of a group of letters; e.g. removing T yields MEDITATE → MEDIATE.\",\n        fields: [\"Delete one\"],\n        type: searchTypes.MULTIPAIRS,\n        func: str => (x => Wordplay.replaceOne(x, str, \"\"))\n    },\n    {\n        id: \"deleteall\",\n        name: \"Delete all\",\n        desc: \"Pairs of words formed by removing all instances of a group of letters; e.g. removing ER yields DERRIERES → DRIES.\",\n        fields: [\"Delete all\"],\n        type: searchTypes.PAIRS,\n        func: str => (x => x.replaceAll(str, ''))\n    },\n    {\n        id: \"prefix\",\n        name: \"Prefix\",\n        desc: \"Pairs of words formed by inserting a group of letters at the beginning; e.g. ADAM yields ANT → ADAMANT.\",\n        fields: [\"Prefix\"],\n        type: searchTypes.PAIRS,\n        func: str => (x => str + x)\n    },\n    {\n        id: \"suffix\",\n        name: \"Suffix\",\n        desc: \"Pairs of words formed by inserting a group of letters at the end; e.g. NUT yields DOUGH → DOUGHNUT.\",\n        fields: [\"Suffix\"],\n        type: searchTypes.PAIRS,\n        func: str => (x => x + str)\n    },\n    {\n        id: \"beheadments\",\n        name: \"Beheadments\",\n        desc: \"Pairs of words formed by removing the first letter; e.g. EQUALITY → QUALITY.\",\n        fields: [],\n        type: searchTypes.PAIRS,\n        func: () => (x => x.slice(1))\n    },\n    {\n        id: \"curtailments\",\n        name: \"Curtailments\",\n        desc: \"Pairs of words formed by removing the last letter, not including removing the S from regular plurals; e.g. MAGNETON → MAGNETO.\",\n        fields: [],\n        type: searchTypes.PAIRS,\n        func: () => (x => (x.endsWith('S') && !x.endsWith('SS') ? '' : x.slice(0, x.length - 1)))\n    },\n    {\n        id: \"palindromes\",\n        name: \"Palindromes\",\n        desc: \"Words spelled the same forward and backward; e.g. RACECAR.\",\n        fields: [],\n        type: searchTypes.SINGLE,\n        func: () => (x => Wordplay.isPalindrome(x))\n    },\n    {\n        id: \"semordnilaps\",\n        name: \"Semordnilaps\",\n        desc: \"Pairs of words that reverse to each other; e.g. DESSERTS → STRESSED.\",\n        fields: [],\n        type: searchTypes.PAIRS,\n        func: () => (x => Wordplay.getSemordnilap(x))\n    },\n    {\n        id: \"isograms\",\n        name: \"Isograms\",\n        desc: \"Words containing no repeating letters; e.g. UNCOPYRIGHTABLE.\",\n        fields: [],\n        type: searchTypes.SINGLE,\n        func: () => (x => Wordplay.isIsogram(x))\n    },\n    {\n        id: \"supervocalics\",\n        name: \"Supervocalics\",\n        desc: \"Words containing all five vowels exactly once; e.g. EDUCATION.\",\n        fields: [],\n        type: searchTypes.SINGLE,\n        func: () => (x => Wordplay.isSupervocalic(x))\n    },\n    {\n        id: \"spellingbee\",\n        name: \"Spelling Bee solver\",\n        desc: \"Words that can be spelled in the New York Times Spelling Bee game, i.e. must contain the center letter, must use only the given letters, and must be at least four letters.\",\n        fields: [\"Center letter\", \"Outer letters\"],\n        type: searchTypes.SINGLE,\n        func: (center, outer) => (x => Wordplay.spellingBee(x, center, outer))\n    },\n    {\n        id: \"everything\",\n        name: \"Everything\",\n        desc: \"Literally all the words. Helpful for sorting or combining lists.\",\n        fields: [],\n        type: searchTypes.SINGLE,\n        func: () => (x => true)\n    }\n]\n\nexport default searchModes;","import React, { Component } from 'react'\nimport searchModes from '../js/searchmodes.js'\n\nexport default class SearchModeMenu extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {value: ''};\n        \n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        this.props.onSearchModeChange(e.target.value);\n    }\n    \n    render() {\n        return (\n            <div className=\"search-option-wrapper\">\n                <div className=\"instruction select-instruction\" >\n                    Select a <span className=\"bold-accent\">search mode:</span>\n                </div>\n                <div className=\"select-wrapper\">\n                    <label htmlFor=\"search-option-menu\" className=\"arrow-wrapper\">\n                        <i className=\"fas fa-angle-down select-arrow\"></i>\n                    </label>\n                    <select name=\"search-option-menu\" id=\"search-option-menu\" onChange={this.handleChange}>\n                        {searchModes.map(option =>\n                            <option value={option.id} key={\"option-\" + option.id}>{option.name}</option>\n                        )}\n                    </select>\n                </div>\n\n                <p className=\"option-description\">\n                    {this.props.searchMode.desc}\n                </p>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class SearchInputArea extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inputValues: {}\n        }\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n    handleInputChange(event) {\n        this.setState(prevState => {\n            prevState.inputValues[event.target.name] = event.target.value\n        })\n        this.props.onInputChange(event);\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.props.onSubmit} id=\"input-form\">\n                    <div className=\"input-area\">\n                        {this.props.searchMode.fields.map(field =>\n                            <div className=\"input-row\" key={\"row-\" + field}>\n                                <label className=\"field-label\" htmlFor={\"search-inputs-\" + this.props.searchMode.id + \"-\" + field} key={\"label-\" + field}>\n                                    {field}:\n                                </label>\n                                <input \n                                    name={field}\n                                    id={\"search-inputs-\" + this.props.searchMode.id + \"-\" + field}\n                                    type=\"text\"\n                                    className=\"search-input-field\"\n                                    key={\"input-\" + this.props.searchMode.id + \"-\" + field}\n                                    onChange={this.handleInputChange}\n                                ></input>\n                                <br/>\n                            </div>\n                        )}\n                    </div>\n                    {this.props.submitError &&\n                        <div className=\"error-message\">\n                            <i className=\"fas fa-exclamation-triangle error-icon\"></i> It seems there was an error in your input!\n                        </div>\n                    }\n                    <button className=\"search-button\" type=\"submit\">\n                        Search<i className=\"fas fa-search search-icon\"></i>\n                    </button>\n                    \n                </form>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nconst MAX_RESULTS = 1000;\n\nexport default class SearchResults extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            firstIndex: 0\n        }\n\n        this.showPrevResults = this.showPrevResults.bind(this)\n        this.showNextResults = this.showNextResults.bind(this)\n        this.downloadAsTxt = this.downloadAsTxt.bind(this)\n        this.getBackgroundColorStyle = this.getBackgroundColorStyle.bind(this)\n    }\n\n    shouldComponentUpdate(nextProps, nextState){\n        if (this.props.results !== nextProps.results ||\n            this.props.sortOrder !== nextProps.sortOrder ||\n            this.props.sortReverse !== nextProps.sortReverse) {\n                this.setState({\n                    firstIndex: 0\n                })\n        }\n\n        return (\n            this.props.results !== nextProps.results ||\n            this.props.sortOrder !== nextProps.sortOrder ||\n            this.props.sortReverse !== nextProps.sortReverse ||\n            this.state.firstIndex !== nextState.firstIndex\n        )\n    }\n\n    showPrevResults() {\n        this.setState({\n            firstIndex: this.state.firstIndex - MAX_RESULTS\n        })\n    }\n\n    showNextResults() {\n        this.setState({\n            firstIndex: this.state.firstIndex + MAX_RESULTS\n        })\n    }\n\n    // derived from https://stackoverflow.com/questions/44656610/download-a-string-as-txt-file-in-react/44661948\n    downloadAsTxt() {\n        const element = document.createElement(\"a\");\n        const file = new Blob(\n            [this.props.results.map(result => \n                result.map( word =>\n                    // word optionally followed by semicolon and score\n                    word + (this.props.wordlist.scores[word] !== undefined ? ';' + (this.props.wordlist.scores[word]) : '')\n                ).join(', ')\n            ).join('\\n')],\n            {type: 'text/plain'}\n        );\n\n        element.href = URL.createObjectURL(file);\n        element.download = \"wordlisted-results.txt\";\n        document.body.appendChild(element);\n        element.click();\n    }\n\n    getBackgroundColorStyle(resultItem) {\n        let average = 0;\n        for (const word of resultItem) {\n            if (this.props.wordlist.scores[word] !== undefined) {\n                average += this.props.wordlist.scores[word];\n            }\n        }\n        average /= resultItem.length;\n\n        if (average === 0 && resultItem.every(x => this.props.wordlist.scores[x] === undefined)) {\n            return {\n                backgroundColor: \"hsla(0, 100%, 100%, 0.3)\"\n            }\n        }\n        return {\n            backgroundColor: `hsl(${((196 + (50 - average)) % 256 + 256) % 256}, 77%, ${Math.max(51, 51 - 0.2 * (average - 50))}%)` //\n        }\n    }\n\n    render() {\n        let showScores = !this.props.results.every(result => result.every(word => this.props.wordlist.scores[word] === undefined))\n        let resultsStyle = {\n            gridTemplateColumns: (showScores ? \"auto 1fr auto auto\" : \"auto 1fr auto\")\n        }\n\n        return (\n            <div className=\"search-results\">\n                <div className=\"results-count-label\">Results:</div>\n                <div className=\"results-counter\">\n                    { this.props.results.length > 0 ?\n                        <div className=\"results-count\">\n                            <span className=\"results-count-number\">{this.props.results.length}</span>\n                            {this.props.results.length > MAX_RESULTS && \n                                <div className=\"results-count-specifier\">\n                                    ({this.state.firstIndex + 1}-{Math.min(this.state.firstIndex + MAX_RESULTS, this.props.results.length)})\n                                </div>\n                            }\n                            \n                        </div>\n                    :\n                        <div className=\"results-count no-results\">\n                            <div className=\"no-results-message\">I have no words...</div>\n                            <i className=\"far fa-sad-cry no-results-icon\"></i>\n                        </div>\n                    }\n\n                    <div>\n                        { (this.props.results.length > MAX_RESULTS && this.state.firstIndex >= MAX_RESULTS) &&\n                            <button\n                                className=\"more-results-button prev-results-button normal-button\"\n                                onClick={this.showPrevResults}>\n                                {/* Prev<br/>{MAX_RESULTS} */}\n                                <i className=\"fas fa-arrow-left\"></i>\n                            </button>\n                        }\n\n                        { (this.props.results.length > MAX_RESULTS && this.state.firstIndex < this.props.results.length - MAX_RESULTS) &&\n                            <button\n                                className=\"more-results-button next-results-button normal-button\"\n                                onClick={this.showNextResults}>\n                                {/* Next<br/>{MAX_RESULTS} */}\n                                <i className=\"fas fa-arrow-right\"></i>\n                            </button>\n                        }\n                    </div>\n                </div>\n                \n                { this.props.results.length > 0 &&\n                    <div className=\"download-results-button-wrapper\">\n                        <button\n                            className=\"download-results-button linky-button link-border\"\n                            onClick={this.downloadAsTxt}>\n                            Download as .txt\n                        </button>\n                    </div>\n                }\n\n                { this.props.results.length > 0 &&\n                    <div className=\"results-list\" style={resultsStyle}>\n                        {this.props.results.slice(this.state.firstIndex, this.state.firstIndex + MAX_RESULTS).map((x, index) =>\n                            <React.Fragment key={index}>\n                                <div className=\"results-number\" key={index + \"num\"}>\n                                    {index + this.state.firstIndex + 1}\n                                </div>\n                                <div className=\"results-item\" key={index}>\n                                    <div className=\"results-item-text\">\n                                        {x.length === 1 ?\n                                            <div className=\"results-item-inner-text\">\n                                                <span>{x[0]} </span>\n                                                {/* <span className=\"results-item-length\">({x[0].length})</span> */}\n                                            </div>\n                                        :\n                                            <div className=\"results-item-inner-text\">\n                                                <span>{x[0]} <span className=\"pair-divider\">{'\\u2192'}</span> {x[1]}</span>\n                                                {/* <span className=\"results-item-length\">({x[1].length})</span> */}\n                                            </div>\n                                        }\n                                    </div>\n                                </div>\n                                <div className=\"results-length\" key={index + \"len\"}>\n                                    <span className=\"results-item-length\">\n                                        ({x.map(word => word.length).join('/')})\n                                    </span>\n                                </div>\n                                { showScores &&\n                                    <div className=\"results-score\" key={index + \"score\"} style={this.getBackgroundColorStyle(x)}>\n                                        <span className=\"results-item-score\">\n                                            {x.map(word => (this.props.wordlist.scores[word] === undefined ? \"—\" : this.props.wordlist.scores[word])).join('/')}\n                                        </span>\n                                    </div>\n                                }\n                            </React.Fragment>\n                        )}\n                    </div>\n                }   \n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nconst SORTS = [\n    {\n        value: \"abc\",\n        name: \"ABC\"\n    },\n    {\n        value: \"length\",\n        name: \"Length\"\n    },\n    {\n        value: \"score\",\n        name: \"Score\"\n    }\n];\n\nexport default class ResultsSorter extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentSort: SORTS[0]\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"results-sorter\">\n                <span className=\"field-label sorting-label\">\n                    Sort results by:\n                </span>\n                {SORTS.map(sort =>\n                    <label className=\"results-sort-wrapper\" key={sort.value}>\n                        <input className=\"results-sort-input\"\n                            type=\"radio\"\n                            value={sort.value}\n                            name=\"results-sort\"\n                            defaultChecked={this.state.currentSort.value === sort.value}\n                            key={sort.value}\n                            onClick={this.props.onSortClick}\n                            onChange={this.props.onSortChange}\n                        />\n                        <span className=\"results-sort-button\">\n\n                        </span>\n                        <span className=\"results-sort-label field-label\" key={sort.value + \"name\"}>\n                            {sort.name}\n                        </span>\n                    </label>\n                )}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class InfoModal extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            visible: this.props.visible\n        }\n    }\n\n    render() {\n        return (\n            this.props.visible && (\n                <div className=\"modal-wrapper test-wrapper modal-closer\" value=\"modal-closer\" onClick={this.props.onCloseModal}>\n                    <div className=\"modal\">\n                        <div className=\"modal-text\">\n                            <h2 className=\"modal-header\">\n                                <i className=\"fas fa-info-circle info-icon\"></i> About uploading\n                            </h2>\n                            <p>\n                                A wordlist is simply a <span className=\"accent\">.txt</span> or <span className=\"accent\">.dict</span> file with one word on each line.\n                                Any spaces, numbers, or punctuation will be filtered out automatically, so there's no need to remove them yourself.\n                            </p>\n                            <p>\n                                Wordlists can now be <span className=\"accent\">scored</span>! If a word in a list is followed by a semicolon and a number, it will be assigned that score; e.g. <code>AWESOME;100</code> will be scored at 100.\n                                If a word has different scores in multiple lists, the maximum score will apply.\n                            </p>\n                            <p>\n                                This app uses the JavaScript File API and doesn't save your wordlist anywhere, so rest assured that no one can steal your words!\n                            </p>\n                        </div>\n                        <button className=\"modal-close-button normal-button modal-closer\" value=\"modal-closer\" onClick={this.props.onCloseModal}>\n                            Cool beans!\n                        </button>\n                    </div>\n                </div>\n            )\n        )\n    }\n}\n","import Wordplay from \"./wordplay\";\n\nexport default class Wordlist { \n    constructor(list) {\n        this.list = list;\n        this.scores = {};\n        this.clean();\n    }\n\n    loadList(list) {\n        this.list = list;\n        this.clean();\n    }\n\n    // appends all the words in the other list\n    addWords(otherList) {\n        this.list = this.list.concat(otherList);\n        this.clean();\n    }\n\n    // cleans word and assigns word a score if needed\n    processWord(word) {\n        word = word.replaceAll(/\\s/g, '');\n        let cleanedWord = Wordplay.cleanWord(word);\n\n        // matches semicolon followed by at least one number followed by end\n        let scoreMatches = word.match(/;[0-9]+$/);\n        let score = -1;\n        if (scoreMatches !== null) {\n            score = parseInt(scoreMatches[0].slice(1));\n        }\n\n        // if there was a score and the word is good to go\n        if (score !== -1 && cleanedWord.length > 0) {\n            // set score if it's a new max score\n            if (this.scores[cleanedWord] === undefined || this.scores[cleanedWord] < score) {\n                this.scores[cleanedWord] = score;\n            }\n        }\n\n        return cleanedWord;\n    }\n\n    // makes the wordlist:\n    // sorted\n    // scored\n    // all caps (RIP MF DOOM)\n    // sans dupes\n    // sans non-alphabetical characters\n    // sans blank entries\n    clean() {\n        this.list = this.list.map(word =>\n            this.processWord(word) // changes to all caps, removes non-alphabetic characters, and assigns score\n        );\n        \n        this.list = this.list.filter(x => x.length > 0) // remove blank entries\n        this.list.sort(); // sort\n        this.list = [...new Set(this.list)] // remove dupes\n    }\n\n    // returns random word from the list\n    randomWord() {\n        var numWords = this.list.length;\n        return this.list[Math.floor(Math.random() * numWords)]\n    }\n\n    // returns new wordlist filtered by given boolean function\n    filtered(func) {\n        return new Wordlist(this.list.filter(func));\n    }\n\n    // returns array of words in the wordlist such that func(word) is true\n    getWords(func) {\n        var resultWords = [];\n\n        for (const word of this.list) {\n            if (func(word)) {\n                resultWords.push(word);\n            }\n        }\n\n        return resultWords;\n    }\n\n    // returns {word, func(word)} object\n    makePair(func, word) {\n        return {word1: word, word2: func(word)};\n    }\n\n    // returns array of pairs of words (word1, word2) in the wordlist such that func(word1) = word2\n    getPairs(func) {\n        // array of {word, func(word)} objects\n        var wordPairs = this.list.map(word => this.makePair(func, word));\n        \n        // remove pairs where word1 === word2\n        wordPairs = wordPairs.filter(word => word.word1 !== word.word2);\n\n        // sort by word2\n        wordPairs.sort((x, y) => x.word2.localeCompare(y.word2));\n\n        var resultPairs = [];\n        var pairCounter = 0;\n        var listCounter = 0;\n\n        // iterates through sorted array and wordlist simultaneously to find pairs whose word2 are in the wordlist\n        while (pairCounter < wordPairs.length && listCounter < this.list.length) {\n            var pairCurrent = wordPairs[pairCounter];\n            var listCurrent = this.list[listCounter];\n\n            if (listCurrent > pairCurrent.word2) {\n                pairCounter++;\n            } else if (listCurrent === pairCurrent.word2) {\n                resultPairs.push(pairCurrent);\n                pairCounter++;\n            } else {\n                listCounter++;\n            }\n        }\n\n        resultPairs.sort((x, y) => x.word1.localeCompare(y.word1));\n        \n        return resultPairs;\n    }\n\n    // returns array of pairs of words (word1, word2) in the wordlist such that the array func(word1) contains word2\n    getMultipairs(func) {\n        // array of {word, func(word)} objects\n        let wordPairs = [];\n        for (let word1 of this.list) {\n            for (let word2 of func(word1)) {\n                wordPairs.push({word1: word1, word2: word2});\n            }\n        }\n        \n        // remove pairs where word1 === word2\n        wordPairs = wordPairs.filter(word => word.word1 !== word.word2);\n\n        // sort by word2\n        wordPairs.sort((x, y) => x.word2.localeCompare(y.word2));\n\n        var resultPairs = [];\n        var pairCounter = 0;\n        var listCounter = 0;\n\n        // iterates through sorted array and wordlist simultaneously to find pairs whose word2 are in the wordlist\n        while (pairCounter < wordPairs.length && listCounter < this.list.length) {\n            var pairCurrent = wordPairs[pairCounter];\n            var listCurrent = this.list[listCounter];\n\n            if (listCurrent > pairCurrent.word2) {\n                pairCounter++;\n            } else if (listCurrent === pairCurrent.word2) {\n                resultPairs.push(pairCurrent);\n                pairCounter++;\n            } else {\n                listCounter++;\n            }\n        }\n\n        resultPairs.sort((x, y) => x.word1.localeCompare(y.word1));\n        \n        return resultPairs;\n    }\n}","import React, { Component } from 'react'\n\nimport WordlistUploadButton from './WordlistUploadButton.js';\nimport SearchModeMenu from './SearchModeMenu.js';\nimport SearchInputArea from './SearchInputArea.js';\nimport SearchResults from './SearchResults.js';\nimport ResultsSorter from './ResultsSorter.js';\nimport InfoModal from './InfoModal.js';\n\nimport Wordlist from '../js/wordlist.js';\nimport { enable1 } from '../json/enable1.json';\nimport searchModes from '../js/searchmodes.js';\nimport searchTypes from '../js/searchtypes.js';\n\nconst DICTIONARY_NAME = \"English dictionary\";\nconst DEBUG = false;\n\nexport default class SearchArea extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchMode: searchModes[0],\n            inputValues: {},\n            results: [],\n            gotResults: false,\n            wordlist: new Wordlist(enable1),\n            selectingWordlist: true,\n            addingWordlist: false,\n            filenames: [DICTIONARY_NAME],\n            sortOrder: 'abc',\n            sortReverse: false,\n            submitError: false,\n            showingModal: false\n        }\n        this.handleSearchModeChange = this.handleSearchModeChange.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleFileChange = this.handleFileChange.bind(this);\n        this.handleDictionaryClick = this.handleDictionaryClick.bind(this);\n        this.handleWordlistChange = this.handleWordlistChange.bind(this);\n        this.handleNewWordlist = this.handleNewWordlist.bind(this);\n        this.handleWordlistAdd = this.handleWordlistAdd.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleSortChange = this.handleSortChange.bind(this);\n        this.handleSortClick = this.handleSortClick.bind(this);\n        this.openModal = this.openModal.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n    }\n\n    handleSearchModeChange(searchModeName) {\n        let newSearchMode = searchModes.find(x => x.id === searchModeName)\n        let newInputValues = {};\n        for (let field of newSearchMode.fields) {\n            newInputValues[field] = \"\";\n        }\n        this.setState({\n            searchMode: newSearchMode,\n            inputValues: newInputValues,\n            submitError: false\n        });\n\n        document.getElementById(\"input-form\").reset();\n    }\n\n    handleInputChange(event) {\n        this.setState(prevState => {\n            prevState.inputValues[event.target.name] = event.target.value;\n            return prevState;\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        this.setState({\n            submitError: false\n        })\n\n        var functionInputs = []\n        for (const field of this.state.searchMode.fields) {\n            var inputValue = this.state.inputValues[field]\n            if (inputValue === '' || inputValue === undefined) {\n                // blank input, raise error!\n                this.setState({\n                    submitError: true\n                })\n                if (DEBUG) {\n                    console.log(this.state.searchMode.fields);\n                    console.log(this.state.inputValues);\n                }\n                return;\n            }\n            inputValue = inputValue.toUpperCase().replaceAll(' ', '');\n            functionInputs.push(inputValue);\n        }\n\n        var results = []\n\n        try {\n            switch (this.state.searchMode.type) {\n                case searchTypes.SINGLE:\n                    results = this.state.wordlist.getWords(this.state.searchMode.func(...functionInputs)).map(x => [x]);\n                    break;\n                case searchTypes.PAIRS:\n                    results = this.state.wordlist.getPairs(this.state.searchMode.func(...functionInputs)).map(pair => [pair.word1, pair.word2]);\n                    break;\n                case searchTypes.MULTIPAIRS:\n                    results = this.state.wordlist.getMultipairs(this.state.searchMode.func(...functionInputs)).map(pair => [pair.word1, pair.word2]);\n                    break;\n                default:\n                    break;\n            }\n        } catch (err) {\n            // erroneous input, raise error!\n            this.setState({\n                submitError: true\n            })\n            if (DEBUG) {\n                console.log(err);\n            }\n            return;\n        }\n\n        this.setState({\n            results: results,\n            gotResults: true\n        })\n        \n        this.sortResults(this.state.sortOrder)\n    }\n\n    handleFileChange(event) {\n        let file = event.target.files[0];\n\n        this.setState({\n            wordlistError: false\n        })\n\n        if (file) {\n            let reader = new FileReader();\n            reader.readAsText(file);\n            \n            reader.onload = function() {\n                // change the acting wordlist\n                let newWords = reader.result.split('\\n');\n                this.handleNewWordlist(newWords, file.name);\n            }.bind(this)\n\n            reader.onerror = function() {\n                // handle file error\n                this.throwWordlistError();\n            }.bind(this)\n        }\n    }\n\n    throwWordlistError() {\n        this.setState({\n            selectingWordlist: true,\n            wordlistError: true\n        })\n    }\n\n    handleDictionaryClick() {\n        this.handleNewWordlist(enable1, DICTIONARY_NAME);\n    }\n\n    handleNewWordlist(newWords, fileName) {\n        let newFilenames = this.state.filenames;\n        if (this.state.addingWordlist) {\n            if (!newFilenames.includes(fileName)) {\n                newFilenames.push(fileName);\n            }\n        } else {\n            newFilenames = [fileName];\n        }\n        this.setState({\n            filenames: newFilenames\n        })\n\n        if (this.state.addingWordlist) {\n            this.state.wordlist.addWords(newWords);\n        } else {\n            let newWordlist = new Wordlist(newWords);\n            this.setState({\n                wordlist: newWordlist\n            })\n        }\n        this.setState({\n            selectingWordlist: false,\n            addingWordlist: false\n        })\n    }\n\n    handleWordlistChange() {\n        this.setState({\n            selectingWordlist: true,\n            addingWordlist: false\n        })\n    }\n\n    handleWordlistAdd() {\n        this.setState({\n            selectingWordlist: true,\n            addingWordlist: true\n        })\n    }\n\n    handleSortChange(event) {\n        this.setState({\n            sortOrder: event.target.value,\n            sortReverse: false\n        })\n        this.sortResults(event.target.value)\n    }\n\n    handleSortClick(event) {\n        let sortClicked = event.target.value\n        if (this.state.sortOrder === sortClicked) {\n            this.setState({\n                sortReverse: !this.state.sortReverse,\n                results: this.state.results.reverse()\n            })\n        }\n    }\n\n    sortResults(sortOrder) {\n        if (sortOrder === 'abc') {\n            this.setState(oldState => {\n                // sort by abc\n                oldState.results.sort((a, b) => a[0].localeCompare(b[0]))\n                if (oldState.sortReverse) {\n                    oldState.results.reverse();\n                }\n                return oldState;\n            })\n        } else if (sortOrder === 'length') {\n            this.setState(oldState => {\n                // sort by length\n                for (let i = oldState.results[0].length - 1; i >= 0; i--) {\n                    oldState.results.sort((a, b) => (b[i].length - a[i].length))\n                }\n                \n                if (oldState.sortReverse) {\n                    oldState.results.reverse();\n                }\n                return oldState;\n            })\n        } else if (sortOrder === 'score') {\n            this.setState(oldState => {\n                // sort by sum of scores in result\n                oldState.results.sort((a, b) => \n                    b.reduce((c, d) => (\n                        c + (this.state.wordlist.scores[d] === undefined ? 0 : this.state.wordlist.scores[d])\n                    ), 0) - a.reduce((c, d) => (\n                        c + (this.state.wordlist.scores[d] === undefined ? 0 : this.state.wordlist.scores[d])\n                    ), 0)\n                )\n                if (oldState.sortReverse) {\n                    oldState.results.reverse();\n                }\n                return oldState;\n            })\n        }\n    }\n\n    openModal() {\n        this.setState({\n            showingModal: true\n        })\n    }\n\n    closeModal(event) {\n        if (event.target.className.includes(\"modal-closer\")) {\n            this.setState({\n                showingModal: false\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"search-head\">\n                    <InfoModal\n                        visible={this.state.showingModal}\n                        onCloseModal={this.closeModal}\n                    />\n\n                    {this.state.wordlistError &&\n                        <div class=\"error-message\">\n                            <i className=\"fas fa-exclamation-triangle error-icon\"></i> It seems there was an error uploading your wordlist!\n                        </div>\n                    }\n\n                    {this.state.selectingWordlist\n                    ?   <div>\n                            <WordlistUploadButton\n                                onFileChange={this.handleFileChange}\n                                onDictionaryClick={this.handleDictionaryClick}\n                                onOpenModal={this.openModal}\n                            />\n                        </div>\n\n                    :   <div className=\"wordlist-name-box content-box\">\n                            <div className=\"wordlist-name-label\">\n                                Current wordlist{this.state.filenames.length > 1 ? \"s\" : \"\"}:\n                            </div>\n                            {this.state.filenames.map(filename => \n                                <div key={filename} className={\"wordlist-name\" + ((filename === DICTIONARY_NAME) ? \" dictionary-name\" : \"\")}>\n                                    {filename}\n                                </div>\n                            )}\n                            \n                            (<button className=\"add-wordlist-button linky-button link-border\" onClick={this.handleWordlistAdd}>\n                                add a list\n                            </button>)\n                            (<button className=\"change-wordlist-button linky-button link-border\" onClick={this.handleWordlistChange}>\n                                reset\n                            </button>)\n                            \n                        </div>\n                    }\n                </div>\n\n                <div className=\"search-body-box content-box\">\n                    <div className={\"search-curtain\" + (this.state.selectingWordlist ? \"\" : \" search-curtain-off\")}></div>\n                    \n                    <SearchModeMenu\n                        onSearchModeChange={this.handleSearchModeChange}\n                        searchMode={this.state.searchMode}\n                    />\n\n                    <SearchInputArea\n                        searchMode={this.state.searchMode}\n                        inputValues={this.state.inputValues}\n                        onInputChange={this.handleInputChange}\n                        onSubmit={this.handleSubmit}\n                        submitError={this.state.submitError}\n                    />\n                </div>\n                \n                <div className=\"search-results-wrapper\">\n                    <div className=\"search-results-box\">\n                        <div className={\"search-curtain\" + (this.state.selectingWordlist ? \"\" : \" search-curtain-off\")}></div>\n\n                        <ResultsSorter\n                            onSortChange={this.handleSortChange}\n                            onSortClick={this.handleSortClick}\n                        />\n\n                        { this.state.gotResults &&\n                            <SearchResults\n                                results={this.state.results}\n                                sortOrder={this.state.sortOrder}\n                                sortReverse={this.state.sortReverse}\n                                wordlist={this.state.wordlist}\n                            /> \n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import '../index.css';\nimport SearchArea from './SearchArea';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"header-wrapper\">\n        <header className=\"header\">\n          <a href=\"/wordlisted\" className=\"title\">\n            <i className=\"fas fa-file-alt title-logo\"></i>\n            <span className=\"title-text title-1\">Word</span>\n            <span className=\"title-text title-2\">listed<sup>™</sup></span>\n          </a>\n          <div className=\"subtitle\">Quick wordlist search tool</div>\n          <div className=\"subsubtitle\">\n            <span className=\"author\">by <a href=\"https://aaronson.org\" rel=\"noreferrer noopener\" target=\"_blank\" className=\"link-border\">Adam Aaronson</a></span>\n            <span className=\"accent\"> • </span>\n            <a href=\"https://twitter.com/aaaronson\" rel=\"noreferrer noopener\" target=\"_blank\"><i className=\"fab fa-twitter\"></i></a>\n            <span className=\"accent\"> • </span>\n            <a href=\"https://www.buymeacoffee.com/aaronson\" rel=\"noreferrer noopener\" target=\"_blank\" className=\"link-border\">Buy me a coffee!</a>\n          </div>\n        </header>\n        <br/>\n        <div className=\"sub-header\">\n            <i className=\"fas fa-fire-alt announcement-icon\"></i>\n            <span className=\"announcement\">New replace and delete search modes!</span>\n        </div>\n      </div>\n\n      <SearchArea />\n\n      <footer className=\"footer-wrapper\">\n        <p className=\"copyright-line\">\n          © {new Date().getFullYear()} Adam Aaronson • <a href=\"https://aaronson.org\" rel=\"noreferrer noopener\" target=\"_blank\">Aaronson.org</a> • <a href=\"https://twitter.com/aaaronson\" rel=\"noreferrer noopener\" target=\"_blank\"><i className=\"fab fa-twitter\"></i></a> • <a href=\"https://github.com/adamaaronson/wordlisted\" rel=\"noreferrer noopener\" target=\"_blank\"><i className=\"fab fa-github\"></i></a>\n        </p>\n        <p>\n          Feedback or suggestions? Feel free to <a href=\"https://twitter.com/aaaronson\" rel=\"noreferrer noopener\" target=\"_blank\" className=\"link-border\">message</a> or <a href=\"mailto:adamaaronson@gmail.com\" className=\"link-border\">email</a> me!\n        </p>\n      </footer>\n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}